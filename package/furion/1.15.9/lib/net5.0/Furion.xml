<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion</name>
    </assembly>
    <members>
        <member name="T:Furion.App">
            <summary>
            全局应用类
            </summary>
        </member>
        <member name="F:Furion.App._settings">
            <summary>
            私有设置，避免重复解析
            </summary>
        </member>
        <member name="P:Furion.App.Settings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="F:Furion.App.Configuration">
            <summary>
            全局配置选项
            </summary>
        </member>
        <member name="P:Furion.App.WebHostEnvironment">
            <summary>
            应用环境，如，是否是开发环境，生产环境等
            </summary>
        </member>
        <member name="F:Furion.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Furion.App.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="P:Furion.App.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.App.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:Furion.App.User">
            <summary>
            获取请求上下文用户
            </summary>
        </member>
        <member name="M:Furion.App.GetService``1">
            <summary>
            获取请求生命周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetService(System.Type)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService``1">
            <summary>
            获取请求生命周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService(System.Type)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetConfig``1(System.String)">
            <summary>
            获取配置
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="jsonKey">配置中对应的Key</param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptions``1">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsMonitor``1">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsSnapshot``1">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.PrintToMiniProfiler(System.String,System.String,System.String,System.Boolean)">
            <summary>
            打印验证信息到 MiniProfiler
            </summary>
            <param name="category">分类</param>
            <param name="state">状态</param>
            <param name="message">消息</param>
            <param name="isError">是否为警告消息</param>
        </member>
        <member name="M:Furion.App.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.App.AppStartups">
            <summary>
            应用所有启动配置对象
            </summary>
        </member>
        <member name="M:Furion.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:Furion.AppStartupAttribute">
            <summary>
            注册服务启动配置
            </summary>
        </member>
        <member name="M:Furion.AppStartupAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:Furion.AppStartupAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:Furion.AppExtra">
            <summary>
            官方包定义
            </summary>
        </member>
        <member name="F:Furion.AppExtra.AUTHENTICATION_JWTBEARER">
            <summary>
            Jwt 验证包
            </summary>
        </member>
        <member name="F:Furion.AppExtra.OBJECTMAPPER_MAPSTER">
            <summary>
            Mapster 映射包
            </summary>
        </member>
        <member name="T:Furion.StartupFilter">
            <summary>
            应用启动时自动注册中间件
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Furion.StartupFilter.DotNetFrameworkResponseHeader">
            <summary>
            dotnet 框架响应报文头
            </summary>
        </member>
        <member name="M:Furion.StartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.StartupFilter.UseStartup(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)">
            <summary>
            配置 Startup 的 Configure
            </summary>
            <param name="app">应用构建器</param>
            <param name="applicationServices">服务提供器</param>
        </member>
        <member name="M:Furion.StartupFilter.ResolveMethodParameterInstances(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider,System.Reflection.MethodInfo)">
            <summary>
            解析方法参数实例
            </summary>
            <param name="app"></param>
            <param name="applicationServices"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:Furion.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Furion.InternalApp.ConfigurationBuilder">
            <summary>
            全局配置构建器
            </summary>
        </member>
        <member name="F:Furion.InternalApp.WebHostEnvironment">
            <summary>
            获取系统环境
            </summary>
        </member>
        <member name="M:Furion.InternalApp.AddConfigureFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            添加配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
        </member>
        <member name="M:Furion.InternalApp.AutoAddJsonFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment,System.String[])">
            <summary>
            自动加载自定义 .json 配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
            <param name="ignoreConfigurationFiles"></param>
        </member>
        <member name="M:Furion.InternalApp.AutoAddXmlFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment,System.String[])">
            <summary>
            自动加载自定义 .xml 配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
            <param name="ignoreConfigurationFiles"></param>
        </member>
        <member name="F:Furion.InternalApp.excludeJsons">
            <summary>
            默认排除配置项
            </summary>
        </member>
        <member name="F:Furion.InternalApp.runtimeJsonSuffixs">
            <summary>
            排除运行时 Json 后缀
            </summary>
        </member>
        <member name="T:Furion.AppSettingsOptions">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectMiniProfiler">
            <summary>
            集成 MiniProfiler 组件
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectSpecificationDocument">
            <summary>
            是否启用规范化文档
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.EnabledReferenceAssemblyScan">
            <summary>
            是否启用引用程序集扫描
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.DynamicLogLevel">
            <summary>
            动态日志级别
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.PrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="M:Furion.AppSettingsOptions.PostConfigure(Furion.AppSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.IDispatchProxy">
            <summary>
            代理拦截依赖接口
            </summary>
        </member>
        <member name="P:Furion.IDispatchProxy.Target">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Furion.IDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="T:Furion.IGlobalDispatchProxy">
            <summary>
            全局代理拦截接口
            </summary>
        </member>
        <member name="T:Furion.AppStartup">
            <summary>
            依赖注入全局模块
            </summary>
        </member>
        <member name="T:Furion.HostingStartup">
            <summary>
            配置程序启动时自动注入
            </summary>
        </member>
        <member name="M:Furion.HostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置应用启动
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权验证核心方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            策略验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.AuthorizeHandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.Authorization.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizeProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.OptionsSettingsAttribute">
            <summary>
            选项配置特性
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="jsonKey">appsetting.json 对应键</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="jsonKey">appsetting.json 对应键</param>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.JsonKey">
            <summary>
            对应配置文件中的Key
            </summary>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.PostConfigureAll">
            <summary>
            对所有配置实例进行后期配置
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions">
            <summary>
            应用选项依赖接口
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`1">
            <summary>
            选项后期配置
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptions`1.PostConfigure(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`2">
            <summary>
            带验证的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TOptionsValidation"></typeparam>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptionsListener`1">
            <summary>
            带监听的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptionsListener`1.OnListener(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            监听
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.CorsAccessor.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            响应标头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="M:Furion.CorsAccessor.CorsAccessorSettingsOptions.PostConfigure(Furion.CorsAccessor.CorsAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlObjectProxyAttribute">
            <summary>
            Sql 对象类型执行代理
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlObjectProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">对象名</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlObjectProxyAttribute.Name">
            <summary>
            对象名
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProxyAttribute">
            <summary>
            Sql 执行代理基特性
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyAttribute.DbContextLocator">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlSentenceProxyAttribute">
            <summary>
            Sql 语句执行代理
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.Sql">
            <summary>
            Sql 语句
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlSentenceProxyAttribute.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlExecuteAttribute">
            <summary>
            Sql 执行特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlExecuteAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">sql 语句</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlFunctionAttribute">
            <summary>
            Sql 函数特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlFunctionAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProcedureAttribute">
            <summary>
            数据库存储过程特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlProcedureAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">存储过程名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlDispatchProxy">
            <summary>
            Sql 执行代理依赖接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlProxyMethod">
            <summary>
            Sql 代理方法元数据
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.ParameterModel">
            <summary>
            参数模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.ReturnType">
            <summary>
            方法返回值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.Context">
            <summary>
            数据库操作上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.IsAsync">
            <summary>
            是否是异步方法
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlProxyMethod.FinalSql">
            <summary>
            最终 Sql 语句
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlDispatchProxy">
            <summary>
            Sql 执行代理类
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDispatchProxy.Target">
            <summary>
            实例对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截同步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步带返回值方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSql(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSqlAsync(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.ExecuteSqlOfTAsync``1(Furion.DatabaseAccessor.SqlProxyMethod)">
            <summary>
            执行 Sql 操作
            </summary>
            <param name="sqlProxyMethod">代理方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.GetProxyMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            获取代理方法信息
            </summary>
            <param name="method">方法</param>
            <param name="args">参数列表</param>
            <returns>SqlProxyMethod</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.GetDbContext(System.Type)">
            <summary>
            获取数据库上下文
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns>数据库上下文</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlDispatchProxy.CombineDbParameter(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            创建数据库命令参数字典
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbParameterAttribute">
            <summary>
            DbParameter 配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbParameterAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbParameterAttribute.#ctor(System.Data.ParameterDirection)">
            <summary>
            构造函数
            </summary>
            <param name="direction">参数方向</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.Direction">
            <summary>
            参数输出方向
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.DbType">
            <summary>
            数据库对应类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbParameterAttribute.Size">
            <summary>
            大小
            </summary>
            <remarks>Nvarchar/varchar类型需指定</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContext`1">
            <summary>
            默认应用数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContext`2">
            <summary>
            应用数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavingChangesEvent(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            数据库上下文提交更改之前执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavedChangesEvent(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            数据库上下文提交更改成功执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SaveChangesFailedEvent(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            数据库上下文提交更改失败执行事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库上下文初始化调用方法
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            数据库上下文配置模型调用方法
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.InsertOrUpdateIgnoreNullValues">
            <summary>
            新增或更新忽略空值（默认值）
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.EnabledEntityStateTracked">
            <summary>
            启用实体跟踪（默认值）
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.EnabledEntityChangedListener">
            <summary>
            启用实体数据更改监听
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.Tenant">
            <summary>
            获取租户信息
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.TenantIdQueryFilterExpression(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.String)">
            <summary>
            构建基于表租户查询过滤器表达式
            </summary>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="onTableTenantId">多租户Id属性名</param>
            <returns>表达式</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.FakeDeleteQueryFilterExpression(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.String)">
            <summary>
            构建假删除查询过滤器表达式
            </summary>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="isDeletedKey">多租户Id属性名</param>
            <returns>表达式</returns>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContext`2.ChangeTrackerEntities">
            <summary>
            正在更改并跟踪的数据
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavingChangesEventInner(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            内部数据库上下文提交更改之前执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SavedChangesEventInner(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            内部数据库上下文提交更改成功执行事件
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.SaveChangesFailedEventInner(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            内部数据库上下文提交更改失败执行事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContext`2.AttachEntityChangedListener(Microsoft.EntityFrameworkCore.DbContext,System.String,System.Collections.Generic.Dictionary{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues})">
            <summary>
            附加实体改变监听
            </summary>
            <param name="dbContext"></param>
            <param name="triggerMethodName"></param>
            <param name="changeTrackerEntities"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContextAttribute">
            <summary>
            数据库上下文配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.ProviderName">
            <summary>
            数据库提供器名称
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.Mode">
            <summary>
            数据库上下文模式
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.TablePrefix">
            <summary>
            表统一前缀
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.AppDbContextAttribute.TableSuffix">
            <summary>
            表统一后缀
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.AppDbContextBuilder">
            <summary>
            数据库上下文构建器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.EntityCorrelationTypes">
            <summary>
            数据库实体相关类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.DbFunctionMethods">
            <summary>
            数据库函数方法集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.ModelBuildEntityMethod">
            <summary>
            创建数据库实体方法
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.IsWebEnvironment">
            <summary>
            判断是否是 Web 环境
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureDbContextEntity(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置数据库上下文实体
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.CreateEntityTypeBuilder(System.Type,Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType,Furion.DatabaseAccessor.AppDbContextAttribute)">
            <summary>
            创建实体类型构建器
            </summary>
            <param name="type">数据库关联类型</param>
            <param name="modelBuilder">模型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextType">数据库上下文类型</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType"></param>
            <param name="appDbContextAttribute">数据库上下文特性</param>
            <returns>EntityTypeBuilder</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityTableName(System.Type,Furion.DatabaseAccessor.AppDbContextAttribute,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置实体表名
            </summary>
            <param name="type">实体类型</param>
            <param name="appDbContextAttribute">数据库上下文特性</param>
            <param name="entityTypeBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextType">数据库上下文类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityMutableTableName(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置实体动态表名
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityNoKeyType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Collections.Generic.List{System.Type})">
            <summary>
            配置无键实体类型
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="EntityNoKeyTypes">无键实体列表</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.LoadModelBuilderOnCreating(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Collections.Generic.List{Furion.DatabaseAccessor.IPrivateModelBuilderFilter})">
            <summary>
            加载模型构建筛选器创建之前拦截
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="modelBuilderFilterInstances">模型构建器筛选器实例</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.LoadModelBuilderOnCreated(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Collections.Generic.List{Furion.DatabaseAccessor.IPrivateModelBuilderFilter})">
            <summary>
            加载模型构建筛选器创建之后拦截
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="modelBuilderFilterInstances">模型构建器筛选器实例</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntityTypeBuilder(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置数据库实体类型构建器
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureEntitySeedData(System.Type,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type,Furion.DatabaseAccessor.DbContextCorrelationType)">
            <summary>
            配置数据库实体种子数据
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="dbContextCorrelationType">数据库实体关联类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.ConfigureDbFunctions(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type)">
            <summary>
            配置数据库函数
            </summary>
            <param name="modelBuilder">模型构建起</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.IsInThisDbContext(System.Type,System.Type)">
            <summary>
            判断当前类型是否在数据库上下文中
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="entityCorrelationType">数据库实体关联类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.IsInThisDbContext(System.Type,System.Reflection.MethodInfo)">
            <summary>
            判断当前函数是否在数据库上下文中
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <param name="method">标识为数据库的函数</param>
            <returns>bool</returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.AppDbContextBuilder.DbContextLocatorCorrelationTypes">
            <summary>
            数据库上下文定位器关联类型集合
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.AppDbContextBuilder.GetDbContextCorrelationType(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取当前数据库上下文关联类型
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns>DbContextCorrelationType</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextCorrelationType">
            <summary>
            数据库上下文关联类型
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextCorrelationType.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.DbContextLocator">
            <summary>
            关联的数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.Types">
            <summary>
            所有关联类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityTypes">
            <summary>
            实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityNoKeyTypes">
            <summary>
            无键实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityTypeBuilderTypes">
            <summary>
            实体构建器类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntitySeedDataTypes">
            <summary>
            种子数据类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityChangedTypes">
            <summary>
            实体数据改变类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.ModelBuilderFilterTypes">
            <summary>
            模型构建筛选器类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.EntityMutableTableTypes">
            <summary>
            可变表实体类型集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.DbFunctionMethods">
            <summary>
            数据库函数方法集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.DbContextCorrelationType.ModelBuilderFilterInstances">
            <summary>
            模型构建器筛选器实例
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory">
            <summary>
            动态模型缓存工厂
            </summary>
            <remarks>主要用来实现数据库分表分库</remarks>
        </member>
        <member name="F:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.cacheKey">
            <summary>
            动态模型缓存Key
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.RebuildModels">
            <summary>
            重写构建模型
            </summary>
            <remarks>动态切换表之后需要调用该方法</remarks>
        </member>
        <member name="M:Furion.DatabaseAccessor.DynamicModelCacheKeyFactory.Create(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            更新模型缓存
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextMode">
            <summary>
            数据库上下文模式
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextMode.Cached">
            <summary>
            缓存模型数据库上下文
            <para>
            OnModelCreating 只会初始化一次
            </para>
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextMode.Dynamic">
            <summary>
            动态模型数据库上下文
            <para>
            OnModelCreating 每次都会调用
            </para>
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Db">
            <summary>
            数据库公开类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.MigrationAssemblyName">
            <summary>
            迁移类库名称
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.CustomizeMultiTenants">
            <summary>
            是否启用自定义租户类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.OnTableTenantId">
            <summary>
            基于表的多租户外键名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Db.NotFoundServiceErrorMessage">
            <summary>
            未找到服务错误消息
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository">
            <summary>
            获取非泛型仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository``1">
            <summary>
            获取实体仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>IRepository{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetRepository``2">
            <summary>
            获取实体仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>IRepository{TEntity, TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlRepository">
            <summary>
            获取Sql仓储
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlRepository``1">
            <summary>
            获取Sql仓储
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetSqlProxy``1">
            <summary>
            获取Sql代理
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext">
            <summary>
            获取作用域数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext(System.Type)">
            <summary>
            获取作用域数据库上下文
            </summary>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetDbContext``1">
            <summary>
            获取作用域数据库上下文
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext">
            <summary>
            获取新的瞬时数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext(System.Type)">
            <summary>
            获取新的瞬时数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Db.GetNewDbContext``1">
            <summary>
            获取新的瞬时数据库上下文
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.RelationalDiagnosticListener">
            <summary>
            监听 EFCore 操作进程
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.RelationalDiagnosticListener.ListenerName">
            <summary>
            监听进程名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._commands">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._opening">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.RelationalDiagnosticListener._closing">
            <summary>
            操作命令集合
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnCompleted">
            <summary>
            操作完成监听
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnError(System.Exception)">
            <summary>
            操作错误监听
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.RelationalDiagnosticListener.OnNext(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            操作过程监听
            </summary>
            <param name="kv"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.FakeDeleteAttribute">
            <summary>
            假删除/软删除
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.FakeDeleteAttribute.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.FakeDeleteAttribute.State">
            <summary>
            假删除/软删除状态
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.NonAutomaticAttribute">
            <summary>
            手动配置实体特性
            </summary>
            <remarks>支持类和方法</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.NotChangedListenerAttribute">
            <summary>
            跳过实体监听
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.QueryableFunctionAttribute">
            <summary>
            实体函数配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.QueryableFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.QueryableFunctionAttribute.#ctor(System.String,System.String,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="name">函数名</param>
            <param name="schema">架构名</param>
            <param name="dbContextLocators">数据库上下文定位器</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.QueryableFunctionAttribute.DbContextLocators">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`1">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`2">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`3">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`4">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`5">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`6">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`7">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`8">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityChangedListener`9">
            <summary>
            实体数据改变监听依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1">
            <summary>
            实体数据改变监听依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChanging(`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变之前（仅支持EFCore操作）
            </summary>
            <param name="entity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChanged(`0,`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变之后（仅支持EFCore操作）
            </summary>
            <param name="newEntity"></param>
            <param name="oldEntity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityChangedListener`1.OnChangeFailed(`0,Microsoft.EntityFrameworkCore.DbContext,System.Type,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            监听数据改变失败（仅支持EFCore操作）
            </summary>
            <param name="entity"></param>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <param name="state"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`1">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`2">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`3">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`4">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`5">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`6">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`7">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`8">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityMutableTable`9">
            <summary>
            动态表名依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityMutableTable`1">
            <summary>
            动态表名依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityMutableTable`1.GetTableName(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="dbContext"></param>
            <param name="dbContextLocator"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`1">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`2">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`3">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`4">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`5">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`6">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`7">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`8">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntitySeedData`9">
            <summary>
            数据库种子数据依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntitySeedData`1">
            <summary>
            数据库种子数据依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntitySeedData`1.HasData(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            配置种子数据
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`1">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`2">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`3">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`4">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`5">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`6">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`7">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`8">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityTypeBuilder`9">
            <summary>
            数据库实体类型配置依赖接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityTypeBuilder`1">
            <summary>
            数据库实体类型配置依赖接口（禁止外部继承）
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityTypeBuilder`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0},Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            实体类型配置
            </summary>
            <param name="entityBuilder">实体类型构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`1">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`2">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`3">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`4">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`5">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`6">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`7">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IModelBuilderFilter`8">
            <summary>
            数据库模型构建筛选器依赖接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateModelBuilderFilter">
            <summary>
            数据库模型构建筛选器依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateModelBuilderFilter.OnCreating(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            模型构建之前
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateModelBuilderFilter.OnCreated(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            模型构建之后
            </summary>
            <param name="modelBuilder">模型构建器</param>
            <param name="entityBuilder">实体构建器</param>
            <param name="dbContext">数据库上下文</param>
            <param name="dbContextLocator">数据库上下文定位器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateModelBuilder">
            <summary>
            数据库模型构建器依赖（禁止直接继承）
            </summary>
            <remarks>
            对应 <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/>
            </remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity">
            <summary>
            数据库实体依赖基类
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`1">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`2">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`3">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`4">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`5">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`6">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`7">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`8">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.Entity`9">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntity`1">
            <summary>
            数据库实体依赖基类（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntity`1.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntity`1.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntity`1.IsDeleted">
            <summary>
            软删除
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase">
            <summary>
            数据库实体依赖基类
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`1">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`2">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`3">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`4">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`5">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`6">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`7">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`8">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityBase`9">
            <summary>
            数据库实体依赖基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityBase`1">
            <summary>
            数据库实体依赖基类（禁止外部继承）
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBase`1.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.PrivateEntityBase`1.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey">
            <summary>
            数据库无键实体依赖基接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`1">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`2">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`3">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`3.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`4">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`4.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`5">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`5.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`6">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`6.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`7">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`7.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EntityNotKey`8">
            <summary>
            数据库无键实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EntityNotKey`8.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.PrivateEntityNotKey">
            <summary>
            数据库无键实体基类（禁止外部继承）
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.PrivateEntityNotKey._name">
            <summary>
            无键实体名
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateEntityNotKey.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">数据库中定义名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.PrivateEntityNotKey.GetName">
            <summary>
            获取视图名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity">
            <summary>
            数据库实体依赖基接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`1">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`2">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`3">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`4">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`5">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`6">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`7">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntity`8">
            <summary>
            数据库实体依赖基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntity">
            <summary>
            数据库实体依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey">
            <summary>
            数据库实体依赖基接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`1">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`2">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`3">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`4">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`5">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`6">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`7">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IEntityNotKey`8">
            <summary>
            无键实体基接口
            </summary>
            <typeparam name="TDbContextLocator1">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator2">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator3">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator4">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator5">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator6">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator7">数据库上下文定位器</typeparam>
            <typeparam name="TDbContextLocator8">数据库上下文定位器</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateEntityNotKey">
            <summary>
            无键实体基接口（禁止外部直接继承）
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IPrivateEntityNotKey.GetName">
            <summary>
            数据库中定义名
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbFunctionType">
            <summary>
            数据库函数类型
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbFunctionType.Scalar">
            <summary>
            标量函数
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbFunctionType.Table">
            <summary>
            表值函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbDataConvertExtensions">
            <summary>
            数据库数据转换拓展
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            将 DataTable 转 List 集合
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="dataTable">DataTable</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync``1(System.Data.DataTable)">
            <summary>
            将 DataTable 转 List 集合
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="dataTable">DataTable</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``1(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``2(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``3(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``4(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``5(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``6(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``7(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList``8(System.Data.DataSet)">
            <summary>
            将 DataSet 转 元组
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="dataSet">DataSet</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList(System.Data.DataSet,System.Type[])">
            <summary>
            将 DataSet 转 特定类型
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="returnTypes">特定类型集合</param>
            <returns>List{object}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync(System.Data.DataSet,System.Type[])">
            <summary>
            将 DataSet 转 特定类型
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="returnTypes">特定类型集合</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToList(System.Data.DataTable,System.Type)">
            <summary>
            将 DataTable 转 特定类型
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="returnType">返回值类型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToListAsync(System.Data.DataTable,System.Type)">
            <summary>
            将 DataTable 转 特定类型
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="returnType">返回值类型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbDataConvertExtensions.ToValueTuple(System.Data.DataSet,System.Type)">
            <summary>
            处理元组类型返回值
            </summary>
            <param name="dataSet">数据集</param>
            <param name="tupleType">返回值类型</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbObjectExtensions">
            <summary>
            DatabaseFacade 拓展类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.IsDevelopment">
            <summary>
            是否是开发环境
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.InjectMiniProfiler">
            <summary>
            MiniProfiler 组件状态
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbObjectExtensions.IsPrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbDbDataAdapter(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            初始化数据库适配器对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbDataAdapter dbDataAdapter)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbDbDataAdapter(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            初始化数据库适配器对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbDataAdapter dbDataAdapter, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbDbDataAdapterAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库适配器对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbDataAdapter dbDataAdapter)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrepareDbDbDataAdapterAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            初始化数据库适配器对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbDataAdapter dbDataAdapter, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.CreateDbCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.CommandType)">
            <summary>
            创建数据库命令对象
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.CreateDbDataAdapter(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.CommandType)">
            <summary>
            创建数据库适配器
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <returns>(DbConnection dbConnection, DbCommand dbCommand, DbDataAdapter dbDataAdapter)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection)">
            <summary>
            打开数据库连接
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            打开数据库连接
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.SetDbParameters(System.Data.Common.DbCommand@,System.Data.Common.DbParameter[])">
            <summary>
            设置数据库命令对象参数
            </summary>
            <param name="dbCommand">数据库命令对象</param>
            <param name="parameters">命令参数</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.SetDbParameters(System.Data.Common.DbCommand@,System.Object,System.Data.Common.DbParameter[]@)">
            <summary>
            设置数据库命令对象参数
            </summary>
            <param name="dbCommand">数据库命令对象</param>
            <param name="model">参数模型</param>
            <param name="dbParameters">命令参数</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbObjectExtensions.PrintConnectionToMiniProfiler(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection)">
            <summary>
            打印数据库连接信息到 MiniProfiler
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="dbConnection">数据库连接对象</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlAdoNetExtensions">
            <summary>
            ADONET 拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">命令参数</param>
            <param name="behavior">行为</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReader(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="commandType">命令类型</param>
            <param name="model">命令模型</param>
            <param name="behavior">行为</param>
            <returns>(DataTable dataTable, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataTable
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="behavior">行为</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DataTable dataTable, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="commandType">命令类型</param>
            <returns>(int rowEffects, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 语句返回受影响行数
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(int rowEffects, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>单行单列的值</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalar(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(object result, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>单行单列的值</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回单行单列的值
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(object result, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFill(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFill(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <returns>(DataSet dataSet, DbParameter[] dbParameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFillAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlAdoNetExtensions.DataAdapterFillAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object,System.Data.CommandType,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 DataSet
            </summary>
            <param name="databaseFacade">ADO.NET 数据库对象</param>
            <param name="sql">sql 语句</param>
            <param name="model">命令模型</param>
            <param name="commandType">命令类型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>(DataSet dbSet, DbParameter[] dbParameters)</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Penetrates.DbContextWithLocatorCached">
            <summary>
            数据库上下文和定位器缓存
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.Penetrates.DbContextLocatorTypeCached">
            <summary>
            数据库上下文定位器缓存
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.ConfigureDbContext(System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            配置 SqlServer 数据库上下文
            </summary>
            <param name="optionBuilder">数据库上下文选项构建器</param>
            <param name="interceptors">拦截器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Penetrates.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[],Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库数据库拦截器
            </summary>
            <param name="interceptors">拦截器</param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.PagedQueryableExtensions">
            <summary>
            分部拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.PagedQueryableExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.PagedQueryableExtensions.ToPagedListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.IEntityExtensions">
            <summary>
            实体拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Ethnics``1(``0)">
            <summary>
            获取实体同类（族群）
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <returns>DbSet{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Insert``1(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNow``1(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNow``1(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNowAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertNowAsync``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Update``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateAsync``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNow``1(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNow``1(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNowAsync``1(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateNowAsync``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.UpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.Delete``1(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteAsync``1(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNow``1(``0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNow``1(``0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.DeleteNowAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdate``1(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateAsync``1(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateNow``1(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateNow``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateNowAsync``1(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateNowAsync``1(``0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateInclude``1(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateInclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateInclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateIncludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExclude``1(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExclude``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExclude``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNow``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.InsertOrUpdateExcludeNowAsync``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDelete``1(``0)">
            <summary>
            假删除
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDeleteAsync``1(``0)">
            <summary>
            假删除
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDeleteNow``1(``0)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDeleteNow``1(``0,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDeleteNowAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityExtensions.FakeDeleteNowAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions">
            <summary>
            实体多数据库上下文拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Ethnics``2(``0)">
            <summary>
            获取实体同类（族群）
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>DbSet{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Insert``2(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNow``2(``0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNow``2(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNowAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertNowAsync``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有提交更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Update``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateAsync``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNow``2(``0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNow``2(``0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNowAsync``2(``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateNowAsync``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.UpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.Delete``2(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteAsync``2(``0)">
            <summary>
            删除一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNow``2(``0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNow``2(``0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNowAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.DeleteNowAsync``2(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdate``2(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateAsync``2(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateNow``2(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateNow``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateNowAsync``2(``0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateNowAsync``2(``0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateInclude``2(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateInclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateInclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateIncludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExclude``2(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExclude``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExclude``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNow``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.InsertOrUpdateExcludeNowAsync``2(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDelete``2(``0)">
            <summary>
            假删除
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDeleteAsync``2(``0)">
            <summary>
            假删除
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDeleteNow``2(``0)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDeleteNow``2(``0,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDeleteNowAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.IEntityWithDbContextLocatorExtensions.FakeDeleteNowAsync``2(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.SqlExtensions">
            <summary>
            Sql 拓展类
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.Change(System.String,System.String)">
            <summary>
            切换数据库上下文
            </summary>
            <param name="sql"></param>
            <param name="dbContextLocatorTypeFullName">完整的数据库上下文定位器名称，包含命名空间和名称，如：Furion.DatabaseAccessor.MasterDbContextLocator</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.Change``1(System.String)">
            <summary>
            切换数据库上下文
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="sql">sql 语句</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.GetSqlDatabase(System.String@)">
            <summary>
            获取 Sql 数据库操作对象
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.SqlExtensions.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Extensions.MultiTenantDbContextExtensions">
            <summary>
            多租户数据库上下文拓展
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Extensions.MultiTenantDbContextExtensions.RefreshTenantCache(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            刷新多租户缓存
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.TemporalExtensions">
            <summary>
            时态查询拓展
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporalAll``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            返回属于当前表和历史记录表的行的联合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporalAsOf``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime)">
            <summary>
            返回一个包含实际值（当前）的行的表。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporalFrom``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
            返回一个表，其中具有在指定的时间范围，无论它们是否在
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporalBetween``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
            返回一个表，其中具有在指定的时间范围，无论它们是否在，但是结束时间有边界值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporalContained``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
            返回一个表，该表包含已打开和关闭的所有行版本的值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.AsTemporal``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String,System.Object[])">
            <summary>
            创建时态表
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="temporalCriteria"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.GetTableName``1(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
            获取表名
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbContext"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.TemporalExtensions.GetSqlSafeName(System.String)">
            <summary>
            获取 Sql 安全名
            </summary>
            <param name="sqlName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConvertToDbParameters(System.Object,System.Data.Common.DbCommand)">
            <summary>
            将模型转为 DbParameter 集合
            </summary>
            <param name="model">参数模型</param>
            <param name="dbCommand">数据库命令对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConvertToDbParameters(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.Common.DbCommand)">
            <summary>
            将字典转换成命令参数
            </summary>
            <param name="keyValues">字典</param>
            <param name="dbCommand">数据库命令对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ConfigureDbParameter(System.String,System.Object,Furion.DatabaseAccessor.DbParameterAttribute,System.Data.Common.DbParameter)">
            <summary>
            配置数据库命令参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="dbParameterAttribute">参数特性</param>
            <param name="dbParameter">数据库命令参数</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            生成函数执行 sql 语句
            </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
            <param name="dbFunctionType">函数类型</param>
            <param name="funcName">函数名词</param>
            <param name="parameters">函数参数</param>
            <returns>sql 语句</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Object)">
             <summary>
             生成函数执行 sql 语句
             </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
             <param name="dbFunctionType">函数类型</param>
             <param name="funcName">函数名词</param>
             <param name="model">参数模型</param>
             <returns>(string sql, DbParameter[] parameters)</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.GenerateFunctionSql(System.String,Furion.DatabaseAccessor.DbFunctionType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             生成函数执行 sql 语句
             </summary>
            <param name="providerName">ADO.NET 数据库对象</param>
             <param name="dbFunctionType">函数类型</param>
             <param name="funcName">函数名词</param>
             <param name="keyValues">字典类型参数</param>
             <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput(System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput``1(System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.WrapperProcedureOutput(System.Data.Common.DbParameter[],System.Data.DataSet,System.Type)">
            <summary>
            包裹存储过程返回结果集
            </summary>
            <param name="parameters">命令参数</param>
            <param name="dataSet">数据集</param>
            <param name="type">返回类型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ResolveSqlConfiguration(System.String)">
            <summary>
            解析 Sql 配置信息
            </summary>
            <param name="sqlTemplate">sql或sql模板</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.DataNotFoundException">
            <summary>
            数据没找到异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.ReadOuputValue(System.Data.Common.DbParameter[],System.Collections.Generic.List{Furion.DatabaseAccessor.ProcedureOutputValue}@,System.Object@)">
            <summary>
            读取输出返回值
            </summary>
            <param name="parameters">参数</param>
            <param name="outputValues">输出参数</param>
            <param name="returnValue">返回值</param>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbHelpers.SqlTemplateRegex">
            <summary>
            Sql 模板正在表达式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbHelpers.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor">
            <summary>
            数据库上下文提交拦截器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavingChanges(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
            拦截保存数据库之前
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavingChangesAsync(Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库之前
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavedChanges(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32)">
            <summary>
            拦截保存数据库成功
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SavedChangesAsync(Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库成功
            </summary>
            <param name="eventData"></param>
            <param name="result"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SaveChangesFailed(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData)">
            <summary>
            拦截保存数据库失败
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextSaveChangesInterceptor.SaveChangesFailedAsync(Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData,System.Threading.CancellationToken)">
            <summary>
            拦截保存数据库失败
            </summary>
            <param name="eventData"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlCommandProfilerInterceptor">
            <summary>
            数据库执行命令拦截
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor">
            <summary>
            数据库连接拦截分析器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.IsDevelopment">
            <summary>
            是否是开发环境
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.IsPrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
            拦截数据库连接
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
            <param name="result">拦截结果</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
            拦截数据库连接
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
            <param name="result">拦截器结果</param>
            <param name="cancellationToken">取消异步Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlConnectionProfilerInterceptor.PrintConnectionToMiniProfiler(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData)">
            <summary>
            打印数据库连接信息到 MiniProfiler
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="eventData">数据库连接事件数据</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbProvider">
            <summary>
            数据库提供器选项
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.SqlServer">
            <summary>
            SqlServer 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Sqlite">
            <summary>
            Sqlite 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Cosmos">
            <summary>
            Cosmos 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.InMemoryDatabase">
            <summary>
            内存数据库 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.MySql">
            <summary>
            MySql 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Npgsql">
            <summary>
            PostgreSQL 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Oracle">
            <summary>
            Oracle 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Firebird">
            <summary>
            Firebird 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.Dm">
            <summary>
            Dm 提供器程序集
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportStoredProcedureDatabases">
            <summary>
            不支持存储过程的数据库
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportFunctionDatabases">
            <summary>
            不支持函数的数据库
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportTableFunctionDatabases">
            <summary>
            不支持表值函数的数据库
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportTransactionScopeDatabase">
            <summary>
            不支持环境事务的数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.GetConnectionString``1(System.String)">
            <summary>
            获取数据库上下文连接字符串
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.DbContextAppDbContextAttributes">
            <summary>
            数据库上下文 [AppDbContext] 特性缓存
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.GetAppDbContextAttribute(System.Type)">
            <summary>
            获取数据库上下文 [AppDbContext] 特性
            </summary>
            <param name="dbContexType"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbProvider.NotSupportException">
            <summary>
            不支持操作类型
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.CheckStoredProcedureSupported(System.String,System.Data.CommandType)">
            <summary>
            检查是否支持存储过程
            </summary>
            <param name="providerName">数据库提供器名词</param>
            <param name="commandType">命令类型</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbProvider.CheckFunctionSupported(System.String,Furion.DatabaseAccessor.DbFunctionType)">
            <summary>
            检查是否支持函数
            </summary>
            <param name="providerName">数据库提供器名</param>
            <param name="dbFunctionType">数据库函数类型</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputResult">
            <summary>
            存储过程输出返回值
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.ProcedureOutputResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputResult`1">
            <summary>
            存储过程输出返回值
            </summary>
            <typeparam name="TResult">泛型版本</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.ProcedureOutputResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.OutputValues">
            <summary>
            输出值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputResult`1.Result">
            <summary>
            结果集
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ProcedureOutputValue">
            <summary>
            存储过程输出值模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputValue.Name">
            <summary>
            输出参数名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ProcedureOutputValue.Value">
            <summary>
            输出参数值
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlTemplate">
            <summary>
            Sql 模板
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlTemplate.Sql">
            <summary>
            Sql 语句
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlTemplate.Params">
            <summary>
            Sql 参数
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Models.SqlTemplateParameter">
            <summary>
            Sql 模板参数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Models.SqlTemplateParameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Models.SqlTemplateParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Models.SqlTemplateParameter.Direction">
            <summary>
            参数输出方向
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Models.SqlTemplateParameter.DbType">
            <summary>
            数据库对应类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Models.SqlTemplateParameter.Size">
            <summary>
            大小
            </summary>
            <remarks>Nvarchar/varchar类型需指定</remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbContextLocator">
            <summary>
            数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.MasterDbContextLocator">
            <summary>
            默认数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnDatabase">
            <summary>
            基于多个数据库多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnDatabase.GetDatabaseConnectionString">
            <summary>
            获取数据库连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnSchema">
            <summary>
            基于数据库架构的多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnSchema.GetSchemaName">
            <summary>
            获取数据库架构名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMultiTenantOnTable">
            <summary>
            基于数据库表的多租户模式
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMultiTenantOnTable.GetTenantId">
            <summary>
            获取租户Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateMultiTenant">
            <summary>
            多租户依赖接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.Tenant">
            <summary>
            租户实体
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.Tenant.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Name">
            <summary>
            租户名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Host">
            <summary>
            来源主机地址
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.EmailAddress">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.PhoneNumber">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.Schema">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.Tenant.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.MultiTenantDbContextLocator">
            <summary>
            多租户数据库上下文定位器
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool.InjectMiniProfiler">
            <summary>
            MiniProfiler 组件状态
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbContextPool.dbContexts">
            <summary>
            线程安全的数据库上下文集合
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.AddToPool(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.AddToPoolAsync(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文（异步）
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.ShareTransaction(System.Int32,System.Data.Common.DbTransaction)">
            <summary>
            设置数据库上下文共享事务
            </summary>
            <param name="skipCount"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.ShareTransactionAsync(System.Int32,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            设置数据库上下文共享事务
            </summary>
            <param name="skipCount"></param>
            <param name="transaction"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbContextPool.CloseAll">
            <summary>
            关闭所有数据库链接
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.AddToPool(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.AddToPoolAsync(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            保存数据库上下文（异步）
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.ShareTransaction(System.Int32,System.Data.Common.DbTransaction)">
            <summary>
            设置数据库上下文共享事务
            </summary>
            <param name="skipCount"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.ShareTransactionAsync(System.Int32,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            设置数据库上下文共享事务
            </summary>
            <param name="skipCount"></param>
            <param name="transaction"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbContextPool.CloseAll">
            <summary>
            关闭所有数据库链接
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.DbRepository`1">
            <summary>
            多数据库仓储
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.DbRepository`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.Change``1">
            <summary>
            切换实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.DbRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDeletableRepository`1">
            <summary>
            可删除仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDeletableRepository`2">
            <summary>
            可删除仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.Delete(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteAsync(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(`0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(`0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(`0[],System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.Delete(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExists(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExistsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExistsNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExistsNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExistsNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.DeleteExistsNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDelete(`0)">
            <summary>
            假删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteAsync(`0)">
            <summary>
            假删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNow(`0)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNow(`0,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDelete(System.Object)">
            <summary>
            假删除
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteAsync(System.Object)">
            <summary>
            假删除
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNow(System.Object)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNow(System.Object,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDeletableRepository`2.FakeDeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IInsertableRepository`1">
            <summary>
            可插入仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IInsertableRepository`2">
            <summary>
            可插入仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.Insert(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(`0[],System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(`0[])">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IInsertableRepository`2.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IOperableRepository`1">
            <summary>
            可操作性仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IOperableRepository`2">
            <summary>
            可操作性仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdate(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateAsync(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateNow(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateNow(`0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateNowAsync(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateInclude(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExclude(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IOperableRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IPrivateRepository">
            <summary>
            仓储依赖空接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.IReadableRepository`1">
            <summary>
            可读仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IReadableRepository`2">
            <summary>
            可读仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Find(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Find(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindOrDefault(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindOrDefault(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindOrDefaultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindOrDefaultAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FindOrDefaultAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Single(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.First(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Last(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            加载关联数据
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Include``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件加载关联数据
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Any(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AnyAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.All(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Count(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.CountAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Min(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.MinAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Max(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.MaxAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsQueryable(System.Nullable{System.Boolean})">
            <summary>
            构建查询分析器
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsAsyncEnumerable(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FromSqlRaw(System.String,System.Object[])">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IReadableRepository`2.FromSqlInterpolated(System.FormattableString)">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <remarks>
            支持字符串内插语法
            </remarks>
            <param name="sql">sql 语句</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlExecutableRepository">
            <summary>
            Sql 执行仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlExecutableRepository`1">
            <summary>
            Sql 执行仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlExecutableRepository`1.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlReaderRepository">
            <summary>
            Sql 查询仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlReaderRepository`1">
            <summary>
            Sql 查询仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlReaderRepository`1.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUpdateableRepository`1">
            <summary>
            可更新仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUpdateableRepository`2">
            <summary>
            可更新仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.Update(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(`0[],System.Boolean)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateInclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExists(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExistsAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExistsNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExistsNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExistsNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExistsNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExists(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExists(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExists(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExists(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExists(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExists(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExists(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExists(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUpdateableRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IWritableRepository`1">
            <summary>
            可写仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IWritableRepository`2">
            <summary>
            可写仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.AcceptAllChanges">
            <summary>
            接受所有更改
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SaveNow">
            <summary>
            提交更改操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SaveNow(System.Boolean)">
            <summary>
            提交更改操作
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SaveNowAsync(System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IWritableRepository`2.SaveNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository`1">
            <summary>
            EF Core仓储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`1.#ctor(System.Func{System.Type,Furion.DependencyInjection.IScoped,Microsoft.EntityFrameworkCore.DbContext},Furion.DatabaseAccessor.IRepository,System.IServiceProvider,Furion.DatabaseAccessor.IDbContextPool)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextResolve">数据库上下文解析器</param>
            <param name="repository">非泛型仓储</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="dbContextPool"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository">
            <summary>
            非泛型EF Core仓储实现
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.EFCoreRepository._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.Sql``1">
            <summary>
            获取多数据库上下文 Sql 操作仓储
            </summary>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.EFCoreRepository`2">
            <summary>
            多数据库上下文仓储
            </summary>
            <summary>
            可删除仓储分部类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <summary>
            可插入仓储分部类
            </summary>
            <summary>
            可操作仓储分部类
            </summary>
            <summary>
            可写仓储分部类
            </summary>
            <summary>
            可更新仓储分部类
            </summary>
            <summary>
            可写仓储分部类
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.EFCoreRepository`2._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.EFCoreRepository`2._dbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.#ctor(System.Func{System.Type,Furion.DependencyInjection.IScoped,Microsoft.EntityFrameworkCore.DbContext},Furion.DatabaseAccessor.IRepository,System.IServiceProvider,Furion.DatabaseAccessor.IDbContextPool)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextResolve">数据库上下文解析器</param>
            <param name="repository">非泛型仓储</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="dbContextPool"></param>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.DetachedEntities">
            <summary>
            不跟踪的（脱轨）实体
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.EntityType">
            <summary>
            查看实体类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.DbConnection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeTracker">
            <summary>
            实体追综器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.Model">
            <summary>
            实体模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.ProviderName">
            <summary>
            数据库提供器名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.EFCoreRepository`2.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.HasChanges">
            <summary>
            判断上下文是否更改
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Entry(System.Object)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Entry(`0)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EntityEntryState(System.Object)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EntityEntryState(`0)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns>EntityState</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EntityPropertyEntry(System.Object,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EntityPropertyEntry(`0,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EntityPropertyEntry``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            将实体属性加入托管
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicate">属性表达式</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeEntityState(System.Object,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeEntityState(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0},Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsAttached(System.Object)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsAttached(`0)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Attach(System.Object)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Attach(`0)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AttachRange(System.Object[])">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Detach(System.Object)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Detach(`0)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0})">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns>ConcurrentBag{DbContext}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsKeySet(`0)">
            <summary>
            判断实体是否设置了主键
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EnsureDeleted">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EnsureCreated">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeTable(System.String)">
            <summary>
            动态改变表名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeDatabase(System.String)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsSqlServer">
            <summary>
            判断是否是 SqlServer 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsSqlite">
            <summary>
            判断是否是 Sqlite 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsCosmos">
            <summary>
            判断是否是 Cosmos 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InMemoryDatabase">
            <summary>
            判断是否是 内存中 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsMySql">
            <summary>
            判断是否是 MySql 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsNpgsql">
            <summary>
            判断是否是 PostgreSQL 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsOracle">
            <summary>
            判断是否是 Oracle 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsFirebird">
            <summary>
            判断是否是 Firebird 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsDm">
            <summary>
            判断是否是 Dm 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsRelational">
            <summary>
            判断是否是关系型数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Delete(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteAsync(`0[])">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(`0)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(`0,System.Boolean)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(`0[],System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(`0[])">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Delete(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExists(System.Object)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExistsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExistsNow(System.Object)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExistsNow(System.Object,System.Boolean)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExistsNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.DeleteExistsNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据主键删除一条记录并立即提交
            </summary>
            <param name="key">主键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDelete(`0)">
            <summary>
            假删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteAsync(`0)">
            <summary>
            假删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNow(`0)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNow(`0,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNowAsync(`0,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNowAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDelete(System.Object)">
            <summary>
            假删除
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteAsync(System.Object)">
            <summary>
            假删除
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNow(System.Object)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNow(System.Object,System.Boolean)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FakeDeleteNowAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            假删除并立即提交
            </summary>
            <param name="key">键</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.BuildDeletedEntity(System.Object,System.Boolean)">
            <summary>
            构建被删除的实体
            </summary>
            <param name="key">主键</param>
            <param name="isRealDelete">是否真删除</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SetFakePropertyValue(`0)">
            <summary>
            获取假删除的属性信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Insert(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(`0,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(`0[],System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            新增一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中返回的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(`0[])">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdate(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateAsync(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateNow(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateNow(`0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateNowAsync(`0,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条记录并立即执行
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="checkProperty"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateInclude(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExclude(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.String[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.InsertOrUpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            新增或更新一条排除特定属性记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IgnoreNullValues(`0@,System.Nullable{System.Boolean})">
            <summary>
            忽略空值属性
            </summary>
            <param name="entity"></param>
            <param name="ignoreNullValues"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.IsPropertyValueSet(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            判断属性值是否设置
            </summary>
            <param name="entity"></param>
            <param name="checkProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Find(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Find(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindOrDefault(System.Object)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindOrDefault(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindOrDefaultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据键查询一条记录
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindOrDefaultAsync(System.Object[])">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FindOrDefaultAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            根据多个键查询一条记录
            </summary>
            <param name="keyValues">多个键</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Single(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.First(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Last(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastOrDefault(System.Nullable{System.Boolean})">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean})">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastOrDefaultAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            查询一条记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            根据表达式查询一条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="predicates">表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Where(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}}}[],System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件执行表达式查询多条记录
            </summary>
            <param name="conditionPredicates">条件表达式集合</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            加载关联数据
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Include``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据条件加载关联数据
            </summary>
            <param name="condition">条件</param>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>数据库中的多个实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Any(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AnyAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            判断记录是否存在
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否存在
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.All(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式判断记录是否全部满足条件
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Count(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.CountAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看记录条数
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查询记录条数
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Min(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.MinAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最小记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最小值
            </summary>
            <typeparam name="TResult">最小值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Max(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.MaxAsync(System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            查看最大记录
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            根据表达式查看最大值
            </summary>
            <typeparam name="TResult">最大值类型</typeparam>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsQueryable(System.Nullable{System.Boolean})">
            <summary>
            构建查询分析器
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>IQueryable{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsEnumerable(System.Nullable{System.Boolean})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsAsyncEnumerable(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="tracking">是否跟踪实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">表达式</param>
            <param name="tracking">是否跟踪实体</param>
            <param name="ignoreQueryFilters">是否忽略查询过滤器</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FromSqlRaw(System.String,System.Object[])">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.FromSqlInterpolated(System.FormattableString)">
            <summary>
            执行 Sql 返回 IQueryable
            </summary>
            <remarks>
            支持字符串内插语法
            </remarks>
            <param name="sql">sql 语句</param>
            <returns>IQueryable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Update(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(`0[],System.Boolean)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNow(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(`0[])">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(`0[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateNowAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新多条记录并立即提交
            </summary>
            <param name="entities">多个实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>Task</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateInclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateInclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateInclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExclude(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExclude(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExclude(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExists(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExistsAsync(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExistsNow(`0,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExistsNow(`0,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExistsNowAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">异步取消令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExistsNowAsync(`0,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExists(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExists(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExists(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExists(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateIncludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录中的特定属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExists(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExists(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExists(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExists(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录中的特定属性
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>代理中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.String[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNow(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="cancellationToken">取消异步令牌</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.String[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean})">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyNames">属性名</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.UpdateExcludeExistsNowAsync(`0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            更新一条记录并排除属性并立即提交
            </summary>
            <param name="entity">实体</param>
            <param name="propertyPredicates">属性表达式</param>
            <param name="acceptAllChangesOnSuccess">接受所有更改</param>
            <param name="ignoreNullValues"></param>
            <param name="cancellationToken">取消异步令牌</param>
            <returns>数据库中的实体</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.CheckEntityEffective(`0)">
            <summary>
            检查实体是否有效
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.CheckEntityEffectiveAsync(`0)">
            <summary>
            检查实体是否有效
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.GetEntityKeyValue(`0)">
            <summary>
            获取实体键和值
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.AcceptAllChanges">
            <summary>
            接受所有更改
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SavePoolNow">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SavePoolNow(System.Boolean)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SavePoolNowAsync(System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SavePoolNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存数据库上下文池中所有已更改的数据库上下文
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SaveNow">
            <summary>
            提交更改操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SaveNow(System.Boolean)">
            <summary>
            提交更改操作
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SaveNowAsync(System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.EFCoreRepository`2.SaveNowAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            提交更改操作（异步）
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IDbRepository`1">
            <summary>
            多数据库仓储
            </summary>
            <typeparam name="TDbContextLocator"></typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IDbRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlRepository`1">
            <summary>
            Sql 执行仓储分部类
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <summary>
            Sql 查询仓储分部类
            </summary>
            <summary>
            Sql 操作仓储实现
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQuery(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataTable
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQuery``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 List 集合
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries(System.String,System.Object)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``1(System.String,System.Object)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``2(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``3(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``4(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``5(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``6(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``7(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueries``8(System.String,System.Object)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             执行存储过程返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalar(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalar``1(System.String,System.Object)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回 单行单列
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程无数据返回
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlNonQuery(System.String,System.Object)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlNonQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 无数据返回
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>int</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalar(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalar``1(System.String,System.Object)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行 Sql 返回 单行单列
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutput(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutputAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutput(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutputAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutput``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutputAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutput``1(System.String,System.Object)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlProcedureOutputAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行存储过程返回OUPUT、RETURN、结果集
            </summary>
            <typeparam name="TResult">数据集结果</typeparam>
            <param name="procName">存储过程名</param>
            <param name="model">命令模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>ProcedureOutput</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalar(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalar``1(System.String,System.Object)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>TResult</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行标量函数返回 单行单列
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>object</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQuery(System.String,System.Object)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 DataTable
            </summary>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQuery``1(System.String,System.Object)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlFunctionQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            执行表值函数返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="funcName">函数名</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQuery(System.String,System.Object)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 DataTable
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataTable}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQuery``1(System.String,System.Object)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 List 集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries(System.String,System.Object)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 DataSet
            </summary>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{DataSet}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``1(System.String,System.Object)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``2(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``3(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``4(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``5(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``6(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``7(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueries``8(System.String,System.Object)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``1(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>Task{List{T1}}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``2(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``3(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``4(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``5(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``6(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``7(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``8(System.String,System.Data.Common.DbParameter[],System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="parameters">命令参数</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
             Sql 查询返回 List 集合
            </summary>
            <typeparam name="T1">返回类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>List{T1}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``2(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``3(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``4(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``5(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``6(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``7(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.SqlQueriesAsync``8(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sql 查询返回 元组 集合
            </summary>
            <typeparam name="T1">元组元素类型</typeparam>
            <typeparam name="T2">元组元素类型</typeparam>
            <typeparam name="T3">元组元素类型</typeparam>
            <typeparam name="T4">元组元素类型</typeparam>
            <typeparam name="T5">元组元素类型</typeparam>
            <typeparam name="T6">元组元素类型</typeparam>
            <typeparam name="T7">元组元素类型</typeparam>
            <typeparam name="T8">元组元素类型</typeparam>
            <param name="sql">sql 语句</param>
            <param name="model">参数模型</param>
            <param name="cancellationToken">异步取消令牌</param>
            <returns>元组类型</returns>
        </member>
        <member name="F:Furion.DatabaseAccessor.SqlRepository`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.#ctor(System.Func{System.Type,Furion.DependencyInjection.IScoped,Microsoft.EntityFrameworkCore.DbContext},System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextResolve">数据库上下文解析器</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlRepository`1.Database">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.SqlRepository`1.DynamicContext">
            <summary>
            动态数据库上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository`1.Constraint``1">
            <summary>
            将仓储约束为特定仓储
            </summary>
            <typeparam name="TRestrainRepository">特定仓储</typeparam>
            <returns>TRestrainRepository</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`2">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`2.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`2.Slave1``1">
            <summary>
            获取从库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`3">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`3.Slave2``1">
            <summary>
            获取从库仓储2
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`4">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`4.Slave3``1">
            <summary>
            获取从库仓储3
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`5">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`5.Slave4``1">
            <summary>
            获取从库仓储4
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`6">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`6.Slave5``1">
            <summary>
            获取从库仓储5
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`7">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`7.Slave6``1">
            <summary>
            获取从库仓储6
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IMSRepository`8">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator7">从库</typeparam>
        </member>
        <member name="M:Furion.DatabaseAccessor.IMSRepository`8.Slave7``1">
            <summary>
            获取从库仓储7
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Sql">
            <summary>
            获取 Sql 操作仓储
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.Sql``1">
            <summary>
            获取多数据库上下文 Sql 操作仓储
            </summary>
            <returns>ISqlRepository{TDbContextLocator}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.IRepository`2">
            <summary>
            多数据库上下文仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.DetachedEntities">
            <summary>
            不跟踪的（脱轨）实体
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.EntityType">
            <summary>
            查看实体类型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.DbConnection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.ChangeTracker">
            <summary>
            实体追综器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.Model">
            <summary>
            实体模型
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.ProviderName">
            <summary>
            数据库提供器名
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.IRepository`2.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.HasChanges">
            <summary>
            判断上下文是否更改
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Entry(System.Object)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Entry(`0)">
            <summary>
            将实体加入数据上下文托管
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EntityEntryState(System.Object)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EntityEntryState(`0)">
            <summary>
            获取实体状态
            </summary>
            <param name="entity">实体</param>
            <returns>EntityState</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EntityPropertyEntry(System.Object,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EntityPropertyEntry(`0,System.String)">
            <summary>
            将实体属性加入托管
            </summary>
            <param name="entity">实体</param>
            <param name="propertyName">属性名</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EntityPropertyEntry``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            将实体属性加入托管
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="entity">实体</param>
            <param name="propertyPredicate">属性表达式</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeEntityState(System.Object,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeEntityState(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeEntityState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0},Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            改变实体状态
            </summary>
            <param name="entityEntry">实体条目</param>
            <param name="entityState">实体状态</param>
            <returns>EntityEntry{TEntity}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsAttached(System.Object)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsAttached(`0)">
            <summary>
            判断是否被附加
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Attach(System.Object)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Attach(`0)">
            <summary>
            附加实体
            </summary>
            <param name="entity">实体</param>
            <returns>EntityEntry</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.AttachRange(System.Object[])">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.AttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            附加多个实体
            </summary>
            <param name="entities">多个实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Detach(System.Object)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Detach(`0)">
            <summary>
            取消附加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Detach(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0})">
            <summary>
            取消附加实体
            </summary>
            <param name="entityEntry">实体条目</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.GetDbContexts">
            <summary>
            获取所有数据库上下文
            </summary>
            <returns>ConcurrentBag{DbContext}</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsKeySet(`0)">
            <summary>
            判断实体是否设置了主键
            </summary>
            <param name="entity">实体</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EnsureDeleted">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EnsureCreated">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeTable(System.String)">
            <summary>
            动态改变表名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeDatabase(System.String)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            动态改变数据库
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cancellationToken">异步取消令牌</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsSqlServer">
            <summary>
            判断是否是 SqlServer 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsSqlite">
            <summary>
            判断是否是 Sqlite 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsCosmos">
            <summary>
            判断是否是 Cosmos 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.InMemoryDatabase">
            <summary>
            判断是否是 内存中 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsMySql">
            <summary>
            判断是否是 MySql 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsNpgsql">
            <summary>
            判断是否是 PostgreSQL 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsOracle">
            <summary>
            判断是否是 Oracle 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsFirebird">
            <summary>
            判断是否是 Firebird 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsDm">
            <summary>
            判断是否是 Dm 数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.IsRelational">
            <summary>
            判断是否是关系型数据库
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.Change``2">
            <summary>
            切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.BuildChange``1">
            <summary>
            重新构建并切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.IRepository`2.BuildChange``2">
            <summary>
            重新构建并切换多数据库上下文仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlRepository">
            <summary>
            Sql 操作仓储接口
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.ISqlRepository`1">
            <summary>
            Sql 操作仓储接口
            </summary>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="P:Furion.DatabaseAccessor.ISqlRepository`1.Database">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ISqlRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.ISqlRepository`1.DynamicContext">
            <summary>
            动态数据库上下文
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeDbContextLocator">数据库上下文定位器</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlRepository`1.GetService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlRepository`1.GetRequiredService``1">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.ISqlRepository`1.Constraint``1">
            <summary>
            将仓储约束为特定仓储
            </summary>
            <typeparam name="TRestrainRepository">特定仓储</typeparam>
            <returns>TRestrainRepository</returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`2">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`2._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.Master``1">
            <summary>
            获取主库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`2.Slave1``1">
            <summary>
            获取从库仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`3">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`3._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`3.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`3.Slave2``1">
            <summary>
            获取从库仓储2
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`4">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`4._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`4.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`4.Slave3``1">
            <summary>
            获取从库仓储3
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`5">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`5._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`5.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`5.Slave4``1">
            <summary>
            获取从库仓储4
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`6">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`6._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`6.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`6.Slave5``1">
            <summary>
            获取从库仓储5
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`7">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`7._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`7.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`7.Slave6``1">
            <summary>
            获取从库仓储6
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.MSRepository`8">
            <summary>
            主从库仓储
            </summary>
            <typeparam name="TMasterDbContextLocator">主库</typeparam>
            <typeparam name="TSlaveDbContextLocator1">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator2">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator3">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator4">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator5">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator6">从库</typeparam>
            <typeparam name="TSlaveDbContextLocator7">从库</typeparam>
        </member>
        <member name="F:Furion.DatabaseAccessor.MSRepository`8._repository">
            <summary>
            非泛型仓储
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`8.#ctor(Furion.DatabaseAccessor.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">非泛型仓储</param>
        </member>
        <member name="M:Furion.DatabaseAccessor.MSRepository`8.Slave7``1">
            <summary>
            获取从库仓储7
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.SqlRepository">
            <summary>
            Sql 操作仓储实现
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.SqlRepository.#ctor(System.Func{System.Type,Furion.DependencyInjection.IScoped,Microsoft.EntityFrameworkCore.DbContext},System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextResolve">数据库上下文解析器</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="T:Furion.DatabaseAccessor.UnitOfWorkAttribute">
            <summary>
            工作单元配置特性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            构造函数
            </summary>
            <remarks>
            <para>支持传入事务隔离级别 <see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.IsolationLevel"/> 参数值</para>
            </remarks>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            事务隔离级别
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>，参见：<see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.IsolationLevel"/></para>
            <para>说明：当事务A更新某条数据的时候，不容许其他事务来更新该数据，但可以进行读取操作</para>
            </remarks>
        </member>
        <member name="T:Furion.DatabaseAccessor.UnitOfWorkFilter">
            <summary>
            工作单元拦截器
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkFilter.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkFilter._dbContextPool">
            <summary>
            数据库上下文池
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkFilter.#ctor(Furion.DatabaseAccessor.IDbContextPool)">
            <summary>
            构造函数
            </summary>
            <param name="dbContextPool"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.AESEncryption">
            <summary>
            AES 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.DESCEncryption">
            <summary>
            DESC 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.DESCEncryption.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.DESCEncryption.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.MD5Encryption">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="P:Furion.DataEncryption.MD5Encryption.Instance">
            <summary>
            MD5实例
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Compare(System.String,System.String)">
            <summary>
            字符串 MD5 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">MD5 字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Encrypt(System.String)">
            <summary>
            MD5 加密
            </summary>
            <param name="text">加密文本</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.ValidationItemMetadataAttribute">
            <summary>
            验证项元数据
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationItemMetadataAttribute.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            构造函数
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="defaultErrorMessage">失败提示默认消息</param>
            <param name="regexOptions">正则表达式匹配选项</param>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegularExpression">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.DefaultErrorMessage">
            <summary>
            默认验证失败类型
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegexOptions">
            <summary>
            正则表达式选项
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageAttribute">
            <summary>
            验证消息特性
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Furion.DataValidation.ValidationMessageAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageTypeAttribute">
            <summary>
            验证消息类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeAttribute">
            <summary>
            验证类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Required">
            <summary>
            非空非Null
            <para>
            表达式：^[\w\W]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Numeric">
            <summary>
            数值类型
            <para>
            表达式：^\+?(:?(:?\d+\.\d+)|(:?\d+))|(-?\d+)(\.\d+)?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PositiveNumber">
            <summary>
            正数
            <para>
            表达式：^(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.NegativeNumber">
            <summary>
            负数
            <para>
            表达式：^-(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Integer">
            <summary>
            整数
            <para>
            表达式：^-?[1-9]+[0-9]*$|^0$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Money">
            <summary>
            金钱类型
            <para>
            表达式：^(([0-9]|([1-9][0-9]{0,9}))((\.[0-9]{1,2})?))$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Date">
            <summary>
            日期类型
            <para>
            表达式：^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\2(?:29))(\s+([01][0-9]:|2[0-3]:)?[0-5][0-9]:[0-5][0-9])?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Time">
            <summary>
            时间类型
            <para>
            表达式：^(\d{1,2})(:)?(\d{1,2})\2(\d{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IDCard">
            <summary>
            身份证号码
            <para>
            表达式：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PostCode">
            <summary>
            邮政编码
            <para>
            表达式：^[0-9]{6}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneNumber">
            <summary>
            手机号码
            <para>
            表达式：^13[0-9]{9}$|14[0-9]{9}|15[0-9]{9}$|16[0-9]{9}$|17[0-9]{9}$|18[0-9]{9}$|19[0-9]{9}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Telephone">
            <summary>
            固话格式
            <para>
            表达式：(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneOrTelNumber">
            <summary>
            手机或固话类型
            <para>
            表达式：(^13[0-9]{9}$|14[0-9]{9}|15[0-9]{9}$|16[0-9]{9}$|17[0-9]{9}$|18[0-9]{9}$|19[0-9]{9}$)|((^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$))
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EmailAddress">
            <summary>
            邮件类型
            <para>
            表达式：^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Url">
            <summary>
            网址类型
            <para>
            表达式：^(\w+:\/\/)?\w+(\.\w+)+.*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Color">
            <summary>
            颜色类型
            <para>
            表达式：(^#([0-9a-f]{6}|[0-9a-f]{3})$)|(^rgb\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\)$)|(^rgba\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,(1|1.0|0.[0-9])\)$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Chinese">
            <summary>
            中文
            <para>
            表达式：^[\u4e00-\u9fa5]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv4">
            <summary>
            IPv4 类型
            <para>
            表达式：^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv6">
            <summary>
            IPv6 类型
            <para>
            表达式：/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Age">
            <summary>
            年龄
            <para>
            表达式：^[1-99]?\d*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.ChineseName">
            <summary>
            中文名
            <para>
            表达式：^[\u0391-\uFFE5]{2,15}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EnglishName">
            <summary>
            英文名
            <para>
            表达式：^[A-Za-z]{1,161}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Capital">
            <summary>
            纯大写
            <para>
            表达式：^[A-Z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Lowercase">
            <summary>
            纯小写
            <para>
            表达式：^[a-z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Ascii">
            <summary>
            ASCII 编码
            <para>
            表达式：^[\x00-\xFF]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Md5">
            <summary>
            MD5 加密字符串
            <para>
            表达式：^([a-fA-F0-9]{32})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Zip">
            <summary>
            压缩文件格式
            <para>
            表达式：(.*)\.(rar|zip|7zip|tgz)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Image">
            <summary>
            图片格式
            <para>
            表达式：(.*)\.(jpg|gif|ico|jpeg|png)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Document">
            <summary>
            文档格式
            <para>
            表达式：(.*)\.(doc|xls|docx|xlsx|pdf|md)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Mp3">
            <summary>
            MP3 格式
            <para>
            表达式：(.*)\.(mp3)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Flash">
            <summary>
            Flash 格式
            <para>
            表达式：(.*)\.(swf|fla|flv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Video">
            <summary>
            视频文件格式
            <para>
            表达式：(.*)\.(rm|rmvb|wmv|avi|mp4|3gp|mkv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.WordWithNumber">
            <summary>
            字母加数字组合
            <para>
            表达式：^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$
            </para>
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidationExtensions">
            <summary>
            数据验证拓展类
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="regexPattern">正则表达式</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.AddError(Furion.DataValidation.DataValidationResult)">
            <summary>
            如果有异常则抛出
            </summary>
            <param name="dataValidationResult"></param>
        </member>
        <member name="T:Furion.DataValidation.DataValidationFilter">
            <summary>
            数据验证控制器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            动作方法执行之前操作
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.SetValidateFailedResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Boolean)">
            <summary>
            设置验证失败结果
            </summary>
            <param name="context">动作方法执行上下文</param>
            <param name="modelState">模型验证状态</param>
            <param name="actionDescriptor"></param>
            <param name="isMvcController"></param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            动作方法执行完成操作
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Furion.DataValidation.DataValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.IsValid">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.ValidationResults">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.MemberOrValue">
            <summary>
            成员或值
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidatorContext">
            <summary>
            验证上下文
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidatorContext.OutputValidationInfo(System.Object)">
            <summary>
            输出验证信息
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeMessageSettingsOptions">
            <summary>
            验证消息配置选项
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationTypeMessageSettingsOptions.Definitions">
            <summary>
            验证消息配置表
            </summary>
        </member>
        <member name="T:Furion.DataValidation.IValidationMessageTypeProvider">
            <summary>
            验证消息类型提供器
            </summary>
        </member>
        <member name="P:Furion.DataValidation.IValidationMessageTypeProvider.Definitions">
            <summary>
            验证消息类型定义
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidator">
            <summary>
            数据验证器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationMessageTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationItemMetadatas">
            <summary>
            验证类型正则表达式
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateObject(System.Object,System.Boolean)">
            <summary>
            验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式验证
            </summary>
            <param name="value"></param>
            <param name="regexPattern"></param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationOptionss">验证方式</param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadataCached">
            <summary>
            获取验证类型验证Item集合
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadata(System.Object)">
            <summary>
            获取验证类型正则表达式（需要缓存）
            </summary>
            <param name="validationType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypes">
            <summary>
            获取所有验证类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationMessageTypes">
            <summary>
            获取所有验证消息类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationValidationItemMetadatas">
            <summary>
            获取验证类型所有有效的正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.ReplaceValidateErrorMessage(System.String,System.Reflection.FieldInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换默认验证失败消息
            </summary>
            <param name="name">验证唯一名称</param>
            <param name="field"></param>
            <param name="customErrorMessages"></param>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionAttribute">
            <summary>
            设置依赖注入方式
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="expectInterfaces"></param>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(Furion.DependencyInjection.InjectionActions,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="action"></param>
            <param name="expectInterfaces"></param>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.ExpectInterfaces">
            <summary>
            排除接口
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Proxy">
            <summary>
            代理类型，必须继承 DispatchProxy、IDispatchProxy
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SkipProxyAttribute">
            <summary>
            跳过全局代理
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SkipScanAttribute">
            <summary>
            不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Furion.DependencyInjection.IPrivateDependency">
            <summary>
            依赖空接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.IScoped">
            <summary>
            作用域服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ISingleton">
            <summary>
            单例服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ITransient">
            <summary>
            暂时服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionActions">
            <summary>
            服务注册方式
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.Add">
            <summary>
            如果存在则覆盖
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.TryAdd">
            <summary>
            如果存在则跳过，默认方式
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionPatterns">
            <summary>
            注册范围
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.Self">
            <summary>
            只注册自己
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.FirstInterface">
            <summary>
            第一个接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.SelfWithFirstInterface">
            <summary>
            自己和第一个接口，默认值
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.ImplementedInterfaces">
            <summary>
            所有接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.All">
            <summary>
            注册自己包括所有接口
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.Extensions.DependencyInjectionExtensions">
            <summary>
            依赖注入拓展
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.Extensions.DependencyInjectionExtensions.GetService``1(System.Object)">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.Extensions.DependencyInjectionExtensions.GetRequiredService``1(System.Object)">
            <summary>
            解析服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.DependencyInjection.ExternalService">
            <summary>
            外部注册类型模型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Interface">
            <summary>
            接口类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Service">
            <summary>
            实例类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Proxy">
            <summary>
            代理类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.DependencyInjectionSettingsOptions">
            <summary>
            依赖注入配置选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.DependencyInjectionSettingsOptions.Definitions">
            <summary>
            外部注册定义
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.DependencyInjectionSettingsOptions.PostConfigure(Furion.DependencyInjection.DependencyInjectionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerAttribute">
            <summary>
            动态 WebApi特性接口
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.QueryParametersAttribute">
            <summary>
            将 Action 所有参数 [FromQuery] 化
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.QueryParametersAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention">
            <summary>
            动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._dynamicApiControllerSettings">
            <summary>
            动态接口控制器配置实例
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._verbToHttpMethods">
            <summary>
            默认方法名映射规则
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionHttpMethodAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法请求谓词特性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Furion.DynamicApiController.ParameterRouteTemplate)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <param name="parameterRouteTemplate">参数路由模板</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateParameterRouteTemplates(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            生成参数路由模板（非引用类型）
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.String,System.String[],System.Func{System.String,System.String},Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="orignalName"></param>
            <param name="affixes"></param>
            <param name="configure"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepName参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepVerb(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepVerb 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsSplitCamelCase(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            判断切割命名参数是否配置
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsLowercaseRoute(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否启用小写路由
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionUnifyResultAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置规范化结果类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GetVerbToHttpMethodsConfigure">
            <summary>
            获取方法名映射 [HttpMethod] 规则
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DynamicApiController.IDynamicApiController">
            <summary>
            动态Api控制器依赖接口
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.ParameterRouteTemplate">
            <summary>
            参数路由模板
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.ParameterRouteTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerStartTemplates">
            <summary>
            控制器之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerEndTemplates">
            <summary>
            控制器之后的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionStartTemplates">
            <summary>
            行为之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionEndTemplates">
            <summary>
            行为之后的参数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.VerbToHttpMethods">
            <summary>
            请求动词映射字典
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.ControllerOrderCollection">
            <summary>
            控制器排序集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.ClearStringAffixes(System.String,System.Int32,System.String[])">
            <summary>
            清除字符串前后缀
            </summary>
            <param name="str">字符串</param>
            <param name="pos">0：前后缀，1：后缀，-1：前缀</param>
            <param name="affixes">前后缀集合</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.GetCamelCaseFirstWord(System.String)">
            <summary>
            获取骆驼命名第一个单词
            </summary>
            <param name="str">字符串</param>
            <returns>首单词</returns>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerSettingsOptions">
            <summary>
            动态接口控制器配置
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultRoutePrefix">
            <summary>
            默认路由前缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultHttpMethod">
            <summary>
            默认请求谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultModule">
            <summary>
            默认模块（区域）名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.LowercaseRoute">
            <summary>
            小写路由
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepVerb">
            <summary>
            保留行为名称谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepName">
            <summary>
            保留名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.CamelCaseSeparator">
            <summary>
            骆驼命名分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VersionSeparator">
            <summary>
            版本号分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.ModelToQuery">
            <summary>
            模型转查询参数（只有GET、HEAD请求有效）
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.SupportedMvcController">
            <summary>
            支持Mvc控制器处理
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonControllerAffixes">
            <summary>
            被舍弃的控制器名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonActionAffixes">
            <summary>
            被舍弃的行为名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VerbToHttpMethods">
            <summary>
            复写默认配置路由规则配置
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.PostConfigure(Furion.DynamicApiController.DynamicApiControllerSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerFeatureProvider">
            <summary>
            动态接口控制器特性提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Furion.EventBus.SubscribeMessageAttribute">
            <summary>
            订阅消息特性
            </summary>
        </member>
        <member name="M:Furion.EventBus.SubscribeMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="P:Furion.EventBus.SubscribeMessageAttribute.MessageId">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="T:Furion.EventBus.ISubscribeHandler">
            <summary>
            订阅处理程序空依赖接口
            </summary>
        </member>
        <member name="T:Furion.EventBus.InternalMessageCenter">
            <summary>
            轻量级消息中心（进程内）
            </summary>
        </member>
        <member name="F:Furion.EventBus.InternalMessageCenter.MessageHandlerQueues">
            <summary>
            消息注册队列
            </summary>
        </member>
        <member name="F:Furion.EventBus.InternalMessageCenter.TypeMessageIdsRegisterTable">
            <summary>
            类型消息 Id 注册表
            </summary>
        </member>
        <member name="M:Furion.EventBus.InternalMessageCenter.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="F:Furion.EventBus.InternalMessageCenter.InstanceLock">
            <summary>
            采用延迟加载设计模式处理单例
            </summary>
        </member>
        <member name="P:Furion.EventBus.InternalMessageCenter.Instance">
            <summary>
            获取消息中心对象
            </summary>
        </member>
        <member name="M:Furion.EventBus.InternalMessageCenter.Subscribe``1(System.String,System.Action{System.String,System.Object}[])">
            <summary>
            订阅消息
            </summary>
            <param name="messageId"></param>
            <param name="messageHandlers"></param>
        </member>
        <member name="M:Furion.EventBus.InternalMessageCenter.Send(System.String,System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="messageId"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Furion.EventBus.InternalMessageCenter.Unsubscribe(System.String)">
            <summary>
            取消订阅
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Furion.EventBus.InternalMessageCenter.Subscribe(System.Type,System.String,System.Action{System.String,System.Object}[])">
            <summary>
            订阅消息
            </summary>
            <param name="t"></param>
            <param name="messageId"></param>
            <param name="messageHandlers"></param>
        </member>
        <member name="T:Furion.EventBus.MessageCenter">
            <summary>
            轻量级消息中心（进程内）
            </summary>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Subscribe``1(System.String,System.Action{System.String,System.Object}[])">
            <summary>
            订阅消息
            </summary>
            <param name="messageId"></param>
            <param name="messageHandlers"></param>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Send(System.String,System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="messageId"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Unsubscribe(System.String)">
            <summary>
            取消订阅
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeItemMetadataAttribute">
            <summary>
            异常元数据特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeTypeAttribute">
            <summary>
            错误代码类型特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.IfExceptionAttribute">
            <summary>
            异常复写特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Object,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">错误编码</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Type)">
            <summary>
            捕获特定异常类型异常（用于全局异常捕获）
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorCode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.IfExceptionAttribute._errorMessage">
            <summary>
            私有异常消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.AppFriendlyException">
            <summary>
            自定义友好异常类
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.ExceptionExtensions">
            <summary>
            异常拓展
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.ExceptionExtensions.StatusCode(System.Exception,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.IGlobalExceptionHandler">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.MethodIfException">
            <summary>
            方法异常类
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.ErrorMethod">
            <summary>
            出异常的方法
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.IfExceptionAttributes">
            <summary>
            异常特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorMethods">
            <summary>
            方法错误异常特性
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorCodeTypes">
            <summary>
            错误代码类型
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorCodeMessages">
            <summary>
            错误消息字典
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._friendlyExceptionSettings">
            <summary>
            友好异常设置
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Type,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.PrintToMiniProfiler(System.Exception)">
            <summary>
            打印错误到 MiniProfiler 中
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Furion.FriendlyException.Oops.FormatErrorMessage(System.String,System.Object[])">
            <summary>
            格式化错误消息
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessage(System.Object,System.Object[])">
            <summary>
            获取错误码消息
            </summary>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.HandleEnumErrorCode(System.Object)">
            <summary>
            处理枚举类型错误码
            </summary>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeTypes">
            <summary>
            获取错误代码类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessages">
            <summary>
            获取所有错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.FixErrorCodeSettingMessage(System.Object[])">
            <summary>
            处理异常配置数据
            </summary>
            <param name="errorCodes">错误消息配置对象</param>
            <remarks>
            方式：数组第一个元素为错误码，第二个参数为错误消息，剩下的参数为错误码格式化字符串
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetEndPointExceptionMethod">
            <summary>
            获取堆栈中顶部抛异常方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeItemMessage(System.Reflection.FieldInfo)">
            <summary>
            获取错误代码消息实体
            </summary>
            <param name="fieldInfo">字段对象</param>
            <returns>(object key, object value)</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.MontageErrorMessage(System.String,System.String)">
            <summary>
            获取错误码字符串
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeMessageSettingsOptions">
            <summary>
            异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeMessageSettingsOptions.Definitions">
            <summary>
            异常状态码配置列表
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.FriendlyExceptionSettingsOptions">
            <summary>
            友好异常配置选项
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.HideErrorCode">
            <summary>
            隐藏错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorCode">
            <summary>
            默认错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.FriendlyExceptionSettingsOptions.PostConfigure(Furion.FriendlyException.FriendlyExceptionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.FriendlyException.IErrorCodeTypeProvider">
            <summary>
            异常错误代码提供器
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IErrorCodeTypeProvider.Definitions">
            <summary>
            错误代码定义类型
            </summary>
        </member>
        <member name="T:Furion.InstantMessaging.MapHubAttribute">
            <summary>
            即时通讯集线器配置特性
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.MapHubAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="P:Furion.InstantMessaging.MapHubAttribute.Pattern">
            <summary>
            配置终点路由地址
            </summary>
        </member>
        <member name="T:Furion.InstantMessaging.IM">
            <summary>
            即时通讯静态类
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``1">
            <summary>
            获取集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``2">
            <summary>
            获取强类型集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <typeparam name="TStronglyTyped"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonConverters.DateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonConverters.DateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonConverters.DateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeOffsetJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonConverters.DateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonConverters.DateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.LinqBuilder.LinqExpression">
            <summary>
            EF Core Linq 拓展
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            [EF Core] 创建 Linq/Lambda 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            [EF Core] 创建 Linq/Lambda 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.And``1">
            <summary>
            [EF Core] 创建 And 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexAnd``1">
            <summary>
            [EF Core] 创建 And 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Or``1">
            <summary>
            [EF Core] 创建 Or 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexOr``1">
            <summary>
            [EF Core] 创建 Or 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ExpressionExtensions">
            <summary>
            表达式拓展类
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <param name="mergeWay">组合方式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.GetExpressionPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取Lambda表达式属性名，只限 u=>u.Property 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>属性名</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否是空集合
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <returns>是否为空集合</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ParameterReplaceExpressionVisitor">
            <summary>
            处理 Lambda 参数不一致问题
            </summary>
        </member>
        <member name="F:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.parameterExpressionSetter">
            <summary>
            参数表达式映射集合
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造函数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换表达式参数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            重写基类参数访问器
            </summary>
            <param name="parameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Localization.Penetrates.SetRequestLocalization(Microsoft.AspNetCore.Builder.RequestLocalizationOptions,Furion.Localization.LocalizationSettingsOptions)">
            <summary>
            设置请求多语言对象
            </summary>
            <param name="requestLocalization"></param>
            <param name="localizationSettings"></param>
        </member>
        <member name="T:Furion.Localization.L">
            <summary>
            全局多语言静态类
            </summary>
        </member>
        <member name="F:Furion.Localization.L.LangType">
            <summary>
            语言类型
            </summary>
        </member>
        <member name="M:Furion.Localization.L.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Text">
            <summary>
            String 多语言
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Html">
            <summary>
            Html 多语言
            </summary>
        </member>
        <member name="M:Furion.Localization.L.SetCulture(System.String)">
            <summary>
            设置多语言区域
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Furion.Localization.L.GetCultures">
            <summary>
            获取系统提供的语言列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.LocalizationSettingsOptions">
            <summary>
            多语言配置选项
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.ResourcesPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.SupportedCultures">
            <summary>
            支持的语言列表
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.DefaultCulture">
            <summary>
            默认的语言
            </summary>
        </member>
        <member name="M:Furion.Localization.LocalizationSettingsOptions.PostConfigure(Furion.Localization.LocalizationSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Logging.Extensions.StringLoggingExtensions">
            <summary>
            字符串日志输出拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="logLevel"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="logLevel"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,Microsoft.Extensions.Logging.LogLevel,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="logLevel"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="logLevel"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.Log``1(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDynamic``1(System.String,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDynamic``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDynamic``1(System.String,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDynamic``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            Log
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.GetLogger``1">
            <summary>
            获取日志操作对象
            </summary>
            <typeparam name="TClass">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.GetLogger(System.String)">
            <summary>
            获取日志操作对象
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxy">
            <summary>
            异步代理分发类
            </summary>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Create``2">
            <summary>
            创建代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProxy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行同步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步返回 Task{T} 代理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxyGenerator">
            <summary>
            异步分发代理生成器
            </summary>
        </member>
        <member name="T:Furion.Reflection.DispatchProxyHandler">
            <summary>
            代理分发处理
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeHandle(System.Object[])">
            <summary>
            同步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandle(System.Object[])">
            <summary>
            异步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandleT``1(System.Object[])">
            <summary>
            异步带返回值处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.ClientAttribute">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.ClientAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.ClientAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Furion.RemoteRequest.ClientAttribute.Name">
            <summary>
            客户端名称
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HeaderAttribute">
            <summary>
            设置请问报文头
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HeaderAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Furion.RemoteRequest.HeaderAttribute.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HeaderAttribute.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HostAttribute">
            <summary>
            设置主机配置
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HostAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="baseAddress"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HostAttribute.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="baseAddress"></param>
            <param name="port"></param>
        </member>
        <member name="P:Furion.RemoteRequest.HostAttribute.BaseAddress">
            <summary>
            基础地址
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HostAttribute.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HostAttribute.HandleBaseAddress(System.String)">
            <summary>
            处理Url地址斜杆
            </summary>
            <param name="baseAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.HttpMethodAttribute">
            <summary>
            HTTP 请求谓词基类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpMethodAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodAttribute.Url">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodAttribute.Method">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodAttribute.ResponseType">
            <summary>
            设置响应类型
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodAttribute.HttpContentType">
            <summary>
            body 内容类型
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpMethodAttribute.PropertyNamingPolicy">
            <summary>
            属性命名策略
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.MediaTypeHeaderAttribute">
            <summary>
            设置内容类型
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.MediaTypeHeaderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Furion.RemoteRequest.MediaTypeHeaderAttribute.Value">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.RequestParameterAttribute">
            <summary>
            请求参数特性
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.SafetyAttribute">
            <summary>
            安全请求，出错不抛异常
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.DeleteAttribute">
            <summary>
            HttpDelete 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.DeleteAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.GetAttribute">
            <summary>
            HttpGet 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.GetAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.HeadAttribute">
            <summary>
            HttpHead 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HeadAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.PatchAttribute">
            <summary>
            HttpPatch 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PatchAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.PostAttribute">
            <summary>
            HttpPost 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PostAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.PutAttribute">
            <summary>
            HttpPut 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PutAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Furion.RemoteRequest.BodyAttribute">
            <summary>
            设置参数为 Body 地址
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.QueryAttribute">
            <summary>
            设置参数为 Url 地址
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.IHttpDispatchProxy">
            <summary>
            Http 代理请求
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HttpContentTypeOptions">
            <summary>
            HttpContent 选项
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpContentTypeOptions.StringContent">
            <summary>
            none
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpContentTypeOptions.JsonStringContent">
            <summary>
            application/json;text/json;application/*+json
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpContentTypeOptions.XmlStringContent">
            <summary>
            application/xml;text/xml;application/*+xml
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpContentTypeOptions.MultipartFormDataContent">
            <summary>
            multipart/form-data
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpContentTypeOptions.FormUrlEncodedContent">
            <summary>
            x-www-form-urlencoded
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.JsonNamingPolicyOptions">
            <summary>
            Json 命名策略选项
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.JsonNamingPolicyOptions.CamelCase">
            <summary>
            小写
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.JsonNamingPolicyOptions.Null">
            <summary>
            保持原有名称定义
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.ResponseType">
            <summary>
            响应类型
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.ResponseType.Object">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.ResponseType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.ResponseType.Stream">
            <summary>
            流
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.ResponseType.ByteArray">
            <summary>
            Byte 数组
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions">
            <summary>
            远程请求字符串拓展
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},System.Threading.CancellationToken)">
            <summary>
            发送 Get 请求
            </summary>
            <param name="requestUri"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Get 请求
            </summary>
            <param name="requestUri"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="deserResultOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},System.Threading.CancellationToken)">
            <summary>
            发送 Head 请求
            </summary>
            <param name="requestUri"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Head 请求
            </summary>
            <param name="requestUri"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="deserResultOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsync(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Post 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsAsync``1(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Post 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="deserResultOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsync(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Put 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsAsync``1(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Put 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="deserResultOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsync(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Delete 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsAsync``1(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Delete 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="deserResultOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsync(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Patch 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsAsync``1(System.String,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Patch 请求
            </summary>
            <param name="requestUri"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="deserResultOptions">自定义反序列化结果的配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsAsync``1(System.String,System.Net.Http.HttpMethod,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Http 请求
            </summary>
            <param name="requestUri"></param>
            <param name="httpMethod"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="deserResultOptions">自定义反序列化结果的配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsync(System.String,System.Net.Http.HttpMethod,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpClient},Furion.RemoteRequest.JsonNamingPolicyOptions,System.Threading.CancellationToken)">
            <summary>
            发送 Http 请求
            </summary>
            <param name="requestUri"></param>
            <param name="httpMethod"></param>
            <param name="bodyArgs"></param>
            <param name="httpContentType"></param>
            <param name="contentType"></param>
            <param name="headers"></param>
            <param name="clientName"></param>
            <param name="requestInterceptor"></param>
            <param name="httpClientInterceptor"></param>
            <param name="propertyNamingPolicy"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.Http">
            <summary>
            请求静态类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.Http.GetHttpProxy``1">
            <summary>
            获取 Http 代理
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="T:Furion.RemoteRequest.ParameterValue">
            <summary>
            参数及参数值
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.ParameterValue.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.ParameterValue.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.ParameterValue.IsUrlParameter">
            <summary>
            是否 Url 地址参数
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.ParameterValue.IsBodyParameter">
            <summary>
            是否 Body参数
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.Penetrates">
            <summary>
            内部公共类
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.Penetrates.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.Penetrates.SetHttpRequestBody(System.Net.Http.HttpRequestMessage,System.Object,Furion.RemoteRequest.HttpContentTypeOptions,Furion.RemoteRequest.JsonNamingPolicyOptions,System.String)">
            <summary>
            设置方法体
            </summary>
            <param name="request"></param>
            <param name="bodyArgs"></param>
            <param name="bodyContentTypeOptions"></param>
            <param name="jsonNamingPolicyOptions"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Furion.RemoteRequest.Penetrates.CreateRequestException(System.Net.Http.HttpResponseMessage)">
            <summary>
            创建请求异常信息
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.HttpDispatchProxy">
            <summary>
            请求拦截代理
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpDispatchProxy.Target">
            <summary>
            实例对象
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截同步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步带返回值方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SendAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            发送请求
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.BuildHttpRequestMessage(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            构建 HttpRequestMessage 对象
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.CombineUrlAddress(System.Reflection.MethodInfo,Furion.RemoteRequest.HttpMethodAttribute)">
            <summary>
            拼接 Url 地址
            </summary>
            <param name="method"></param>
            <param name="httpMethodAttribute"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.RemoteRequest.HttpDispatchProxy.objectParameterPattern">
            <summary>
            展开参数
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpDispatchProxy.singleParameterPattern">
            <summary>
            单个参数正则表达式
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.HandleUrlParameters(System.String,System.Collections.Generic.Dictionary{System.String,Furion.RemoteRequest.ParameterValue})">
            <summary>
            处理 Url 地址参数（还得处理手动处理参数情况）
            </summary>
            <param name="urlAddress"></param>
            <param name="methodParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetHttpRequestHeaders(System.Reflection.MethodInfo,System.Net.Http.HttpRequestMessage)">
            <summary>
            设置请求头
            </summary>
            <param name="method"></param>
            <param name="request"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetHttpRequestBody(System.Reflection.MethodInfo,Furion.RemoteRequest.HttpMethodAttribute,System.Collections.Generic.Dictionary{System.String,Furion.RemoteRequest.ParameterValue},System.Net.Http.HttpRequestMessage)">
            <summary>
            设置请求体
            </summary>
            <param name="method"></param>
            <param name="httpMethodAttribute"></param>
            <param name="methodParameters"></param>
            <param name="request"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.ValidateMethodParameters(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            验证方法参数
            </summary>
            <param name="method"></param>
            <param name="args"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentBuilder">
            <summary>
            规范化文档构建器
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._specificationDocumentSettings">
            <summary>
            规范化文档配置
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._defaultGroups">
            <summary>
            文档默认分组
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._groups">
            <summary>
            文档分组列表
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._groupOrderRegex">
            <summary>
            带排序的分组名
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.Build(Swashbuckle.AspNetCore.Swagger.SwaggerOptions,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Swagger 生成器构建
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
            <param name="configure">自定义配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildUI(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            Swagger UI 构建
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="routePrefix"></param>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateSwaggerDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            创建分组文档
            </summary>
            <param name="swaggerGenOptions">Swagger生成器对象</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadGroupControllerWithActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载分组控制器和动作方法列表
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureTagsAction(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置标签
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureActionSequence(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置 Action 排序
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSchemaId(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger SchemaId
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载注释描述文件
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSecurities(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置授权
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateGroupEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            配置分组终点路由
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.InjectMiniProfilerPlugin(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            注入 MiniProfiler 插件
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfoCached">
            <summary>
            获取分组信息缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfo(System.String)">
            <summary>
            获取分组配置信息
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ReadGroups">
            <summary>
            读取所有分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroupsCached">
            <summary>
            获取控制器组缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroups(System.Type)">
            <summary>
            获取控制器分组列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroupsCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)">
            <summary>
            获取动作方法分组列表
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTag(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            获取控制器标签
            </summary>
            <param name="controllerActionDescriptor">控制器接口描述器</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            获取动作方法标签
            </summary>
            <param name="apiDescription">接口描述器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.IsApiAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            是否是动作方法
            </summary>
            <param name="method">方法</param>
            <param name="ReflectedType">声明类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ResolveGroupExtraInfo(System.String)">
            <summary>
            解析分组附加信息
            </summary>
            <param name="group">分组名</param>
            <returns></returns>
        </member>
        <member name="T:Furion.SpecificationDocument.EnumSchemaFilter">
            <summary>
            修正 规范化文档 Enum 提示
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.TagsOrderDocumentFilter">
            <summary>
            标签文档排序拦截器
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.TagsOrderDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            配置拦截
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.TagsOrderDocumentFilter.GetTagOrder(System.String)">
            <summary>
            获取标签排序
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.SpecificationDocument.GroupExtraInfo">
            <summary>
            分组附加信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Group">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Order">
            <summary>
            分组排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiInfo">
            <summary>
            规范化文档开放接口信息
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationOpenApiInfo._group">
            <summary>
            分组私有字段
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Group">
            <summary>
            所属组
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem">
            <summary>
            安全定义需求子项
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Scheme">
            <summary>
            安全Schema
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Accesses">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme">
            <summary>
            规范化稳定安全配置
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Requirement">
            <summary>
            安全需求
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions">
            <summary>
            规范化文档配置选项
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocumentTitle">
            <summary>
            文档标题
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DefaultGroupName">
            <summary>
            默认分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAuthorized">
            <summary>
            启用授权支持
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.FormatAsV2">
            <summary>
            格式化为V2版本
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.RoutePrefix">
            <summary>
            配置规范化文档地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.VirtualPath">
            <summary>
            配置虚拟目录
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocExpansionState">
            <summary>
            文档展开设置
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.GroupOpenApiInfos">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.SecurityDefinitions">
            <summary>
            安全定义
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.Servers">
            <summary>
            配置 Servers
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.HideServers">
            <summary>
            隐藏 Servers
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.PostConfigure(Furion.SpecificationDocument.SpecificationDocumentSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Startup">
            <summary>
            Furion 框架底层启动项配置
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyModelAttribute">
            <summary>
            规范化模型特性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="P:Furion.UnifyResult.UnifyModelAttribute.ModelType">
            <summary>
            模型类型（泛型）
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.SucceededUnifyResultFilter">
            <summary>
            规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResult`1">
            <summary>
            RESTful 风格结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyResultStatusCodesMiddleware">
            <summary>
            状态码中间件
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="modelStates"></param>
            <param name="validationResults"></param>
            <param name="validateFailedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="modelStates"></param>
            <param name="validationResults"></param>
            <param name="validateFailedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            处理输出状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.IsEnabledUnifyHandle">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.RESTfulResultType">
            <summary>
            规范化结果类型
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyResultExtrasKey">
            <summary>
            规范化结果额外数据键
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyResultStatusCodeKey">
            <summary>
            规范化结果状态码
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Fill(System.Object)">
            <summary>
            填充附加信息
            </summary>
            <param name="extras"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Take">
            <summary>
            读取附加信息
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Set(System.String,System.Object)">
            <summary>
            设置规范化结果信息
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Get(System.String)">
            <summary>
            读取规范化结果信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.IsSkipUnifyHandlerOnSucceedReturn(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            是否跳过成功返回结果规范处理（状态码 200~209 ）
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.IsSkipUnifyHandler(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            是否跳过规范化处理（包括任意状态：成功，失败或其他状态码）
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.IsSkipUnifyHandlerOnSpecifiedStatusCode(Microsoft.AspNetCore.Http.HttpContext,Furion.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            是否跳过特定状态码规范化处理（如，处理 401，403 状态码情况）
            </summary>
            <param name="context"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Extensions.ObjectExtensions">
            <summary>
            对象拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成 DateTime
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTimeOffset(System.DateTime)">
            <summary>
            将 DateTime 转换成 DateTimeOffset
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.AddOrUpdate(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            合并两个字典
            </summary>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsAsync(System.Type)">
            <summary>
            判断类型是否是异步类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsAnonymous(System.Object)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetAncestorTypes(System.Type)">
            <summary>
            获取所有祖先类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetMethodRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToTaskResult(System.Object,System.Type)">
            <summary>
            返回异步类型
            </summary>
            <param name="obj"></param>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToTitleCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToTitlePascal(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ChangeType``1(System.Object)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="T:Furion.Utilities.JsonSerializerUtility">
            <summary>
            Json序列化静态工具类
            </summary>
        </member>
        <member name="F:Furion.Utilities.JsonSerializerUtility.EnabledPascalPropertyNaming">
            <summary>
            是否启用属性大写操作
            </summary>
        </member>
        <member name="M:Furion.Utilities.JsonSerializerUtility.Serialize(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Utilities.JsonSerializerUtility.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Utilities.JsonSerializerUtility.GetDefaultJsonSerializerOptions">
            <summary>
            获取默认 JSON 序列化选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Utilities.AtomicLongArray">
            <summary>
            线程安全的长整形数组
            </summary>
        </member>
        <member name="F:Furion.Utilities.AtomicLongArray._value">
            <summary>
            长整形数组
            </summary>
        </member>
        <member name="P:Furion.Utilities.AtomicLongArray.Value">
            <summary>
            获取一个只读的长整形数组集合
            </summary>
        </member>
        <member name="P:Furion.Utilities.AtomicLongArray.Item(System.Int32)">
            <summary>
            获取数组下标的值
            </summary>
            <param name="index">数组下标</param>
            <returns>数组下标的值</returns>
        </member>
        <member name="M:Furion.Utilities.AtomicLongArray.#ctor(System.Int32)">
            <summary>
            实例化一个线程安全的长整形数组
            </summary>
            <param name="capacity">数组的容量</param>
        </member>
        <member name="M:Furion.Utilities.AtomicLongArray.CompareAndSet(System.Int32,System.Int64,System.Int64)">
            <summary>
            替换数组中指定下标的值，如果下标的当前值与期望的值相等，则替换成功；不相等说明发生了并发冲突，则替换失败
            </summary>
            <param name="index">数组下标</param>
            <param name="currentValue">期望的值</param>
            <param name="newValue">新的值</param>
            <returns>是否替换成功</returns>
        </member>
        <member name="T:Furion.Utilities.Snowflake">
            <summary>
            雪花算法
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.DATACENTER_ID_BITS">
            <summary>
            机房标识位
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.WORKER_ID_BITS">
            <summary>
            机器标识位
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.SEQUENCE_BITS">
            <summary>
            序列号标识位
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.MAX_DATACENTER_ID">
            <summary>
            最大机房ID = 32
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.MAX_WORKER_ID">
            <summary>
            最大机器ID = 32
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.SEQUENCE_MASK">
            <summary>
            最大序列号 = 4096（单节点每毫秒可产生的最大ID数）
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.WORKER_ID_SHIFT_COUNT">
            <summary>
            机器ID左位移长度 = 12
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.DATACENTER_ID_SHIFT_COUNT">
            <summary>
            机房ID左位移长度 = 17
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.TIMESTAMP_SHIFT_COUNT">
            <summary>
            时间戳左位移长度 = 22
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.CAPACITY">
            <summary>
            历史ID存储数组长度
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake._idCycle">
            <summary>
            历史ID存储数组，该数组为解决时钟回拨而设计，如果历史ID反推出的时间戳大于当前时间戳，说明发生了时钟回拨，此时采用历史ID+1的方式生成新ID，直到时间追赶至回拨前的时间点
            </summary>
        </member>
        <member name="F:Furion.Utilities.Snowflake.START_TIME">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="P:Furion.Utilities.Snowflake.DataCenterId">
            <summary>
            机房ID
            </summary>
        </member>
        <member name="P:Furion.Utilities.Snowflake.WorkerId">
            <summary>
            机器ID
            </summary>
        </member>
        <member name="P:Furion.Utilities.Snowflake.CurrentTimestamp">
            <summary>
            当前时间戳 = 当前时间 - 基础时间
            </summary>
        </member>
        <member name="M:Furion.Utilities.Snowflake.#ctor(System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="dataCenterId"></param>
            <param name="workerId"></param>
        </member>
        <member name="M:Furion.Utilities.Snowflake.GetId">
            <summary>
            获取雪花Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineOptionsBuilder">
            <summary>
            视图引擎选项构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptionsBuilder">
            <summary>
            视图编译构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.#ctor(Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.RenderTypeName(System.Type)">
            <summary>
            渲染类型名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngine">
            <summary>
            视图引擎接口
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngine">
            <summary>
            视图引擎实现类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CreateAndCompileToStream(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            将模板内容编译并输出内存流
            </summary>
            <param name="templateSource"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.WriteDirectives(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            写入Razor 命令
            </summary>
            <param name="content"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineException">
            <summary>
            视图引擎异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplateException">
            <summary>
            视图引擎模板编译异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.GeneratedCode">
            <summary>
            生成的代码
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.Extensions.ViewEngineStringExtensions">
            <summary>
            字符串视图引擎拓展
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFile"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.GetViewEngine">
            <summary>
            获取视图引擎对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.AnonymousTypeWrapper">
            <summary>
            匿名类型包装器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.AnonymousTypeWrapper.model">
            <summary>
            匿名模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员信息
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.Penetrates.TemplateSaveDir">
            <summary>
            模板保存目录
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Penetrates.GetTemplateFileName(System.String)">
            <summary>
            获取模板文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineModel">
            <summary>
            视图引擎模板模型接口
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineModel.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteLiteral(System.String)">
            <summary>
            插入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Write(System.Object)">
            <summary>
            插入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            插入属性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            插入属性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.EndWriteAttribute">
            <summary>
            结束插入属性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Result">
            <summary>
            返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel">
            <summary>
            视图引擎模板模型实现类
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.stringBuilder">
            <summary>
            字符串构建器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.attributeSuffix">
            <summary>
            特性后缀
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel.Model">
            <summary>
            视图模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteLiteral(System.String)">
            <summary>
            插入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Write(System.Object)">
            <summary>
            插入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            插入属性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            插入属性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.EndWriteAttribute">
            <summary>
            结束插入属性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Result">
            <summary>
            返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel`1">
            <summary>
            视图引擎模板模型实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel`1.Model">
            <summary>
            强类型
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptions">
            <summary>
            视图引擎编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.ReferencedAssemblies">
            <summary>
            引用程序集
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.MetadataReferences">
            <summary>
            元数据引用
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.TemplateNamespace">
            <summary>
            模板命名空间
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.Inherits">
            <summary>
            继承
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.DefaultUsings">
            <summary>
            默认 Using
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate`1">
            <summary>
            泛型视图编译模板接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.templateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate`1">
            <summary>
            视图引擎模板（编译后）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.templateType">
            <summary>
            内存流
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions">
            <summary>
            应用中间件拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            注入基础中间件（带Swagger）
            </summary>
            <param name="app"></param>
            <param name="routePrefix">空字符串将为首页</param>
            <param name="swaggerConfigure"></param>
            <param name="swaggerUIConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInjectBase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入基础中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseApp(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            添加应用中间件
            </summary>
            <param name="app">应用构建器</param>
            <param name="configure">应用配置</param>
            <returns>应用构建器</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions">
            <summary>
            终点路由构建器拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions.MapHubs(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            扫描配置所有集线器
            </summary>
            <param name="endpoints"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions">
            <summary>
            多语言中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions.UseAppLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置多语言中间件拓展
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions">
            <summary>
            规范化文档中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions.UseSpecificationDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <param name="swaggerConfigure"></param>
            <param name="swaggerUIConfigure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions">
            <summary>
            状态码中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextLocal">
            <summary>
            获取本地 HttpContext 上下文
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextLocal.Current">
            <summary>
            获取当前 HttpContext 对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextExtensions">
            <summary>
            Http 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            判断是否是 Ajax 请求
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute">
            <summary>
            策略授权特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies">多个策略</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute">
            <summary>
            安全定义特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.ResourceId">
            <summary>
            资源Id，必须是唯一的
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonValidationAttribute">
            <summary>
            跳过验证
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.LowercaseRoute">
            <summary>
            小写路由
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeatAttribute">
            <summary>
            接口参数位置设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.#ctor(Microsoft.AspNetCore.Mvc.ApiSeats)">
            <summary>
            构造函数
            </summary>
            <param name="seat"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.Seat">
            <summary>
            参数位置
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeats">
            <summary>
            接口参数位置
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerStart">
            <summary>
            控制器之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerEnd">
            <summary>
            控制器之后
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionStart">
            <summary>
            行为之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionEnd">
            <summary>
            行为之后
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyResultAttribute">
            <summary>
            规范化结果配置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.WrapType(System.Type)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions">
            <summary>
            应用服务集合拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.MiniProfilerRouteBasePath">
            <summary>
            MiniProfiler 插件路径
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Mvc 注入基础配置（带Swagger）
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="swaggerGenConfigure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            服务注入基础配置（带Swagger）
            </summary>
            <param name="services">服务集合</param>
            <returns>IMvcBuilder</returns>
            <param name="swaggerGenConfigure"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="includeDynamicApiController"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="services">服务集合</param>
            <param name="includeDynamicApiController"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <param name="mvcBuilder"></param>
            <param name="swaggerGenConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            注入基础配置和规范化结果
            </summary>
            <param name="services"></param>
            <param name="swaggerGenConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="swaggerGenConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="swaggerGenConfigure"></param>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">服务配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddStartup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 Startup 自动扫描
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 Startup 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            策略授权服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAppAuthorization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            添加策略授权服务
            </summary>
            <typeparam name="TAuthorizationHandler">策略授权处理程序</typeparam>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <param name="enableGlobalAuthorize">是否启用全局授权</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions">
            <summary>
            可变选项服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.AddConfigurableOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.GetOptionsJsonKey(Furion.ConfigurableOptions.OptionsSettingsAttribute,System.Type)">
            <summary>
            获取选项键
            </summary>
            <param name="optionsSettings">选项配置特性</param>
            <param name="optionsType">选项类型</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions">
            <summary>
            数据库访问器服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.AddDatabaseAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.String)">
            <summary>
            添加数据库上下文
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">配置</param>
            <param name="migrationAssemblyName">迁移类库名称</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.CustomizeMultiTenants(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            启动自定义租户类型
            </summary>
            <param name="services"></param>
            <param name="onTableTenantId">基于表的多租户Id名称</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.RegisterDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务提供器</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions">
            <summary>
            Sqlite 数据库服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionString">连接字符串</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加其他数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionString">连接字符串</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDbPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加其他数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="poolSize">池大小</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
             添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionString">连接字符串</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
             添加默认数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.String,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="providerName">数据库提供器</param>
            <param name="optionBuilder"></param>
            <param name="connectionString">连接字符串</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.AddDb``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])">
            <summary>
            添加数据库上下文
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <param name="services">服务</param>
            <param name="optionBuilder">自定义配置</param>
            <param name="interceptors">拦截器</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.ConfigureDatabase``1(System.String,System.String,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            配置数据库
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="providerName">数据库提供器</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="options">数据库上下文选项构建器</param>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.DatabaseProviderUseMethodCollection">
            <summary>
            数据库提供器 UseXXX 方法缓存集合
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.MigrationsAssemblyAction">
            <summary>
            配置Code First 程序集 Action委托
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.GetDatabaseProviderUseMethod(System.String)">
            <summary>
            获取数据库提供器对应的 useXXX 方法
            </summary>
            <param name="providerName">数据库提供器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseProviderServiceCollectionExtensions.ReadProviderInfo(System.String)">
            <summary>
            解析数据库提供器信息
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.MiniProfilerServiceCollectionExtensions">
            <summary>
            MiniProfiler 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MiniProfilerServiceCollectionExtensions.AddRelationalDiagnosticListener(Microsoft.Extensions.DependencyInjection.IMiniProfilerBuilder)">
            <summary>
            添加 EF Core 进程监听拓展
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean,System.Boolean)">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="mvcBuilder"></param>
            <param name="enabledGlobalDataValidationFilter">启用全局验证过滤器</param>
            <param name="suppressImplicitRequiredAttributeForNonNullableReferenceTypes">禁止C# 8.0 验证非可空引用类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Boolean)">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="services"></param>
            <param name="enabledGlobalDataValidationFilter">启用全局验证过滤器</param>
            <param name="suppressImplicitRequiredAttributeForNonNullableReferenceTypes">禁止C# 8.0 验证非可空引用类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean,System.Boolean)">
            <summary>
            添加全局数据验证
            </summary>
            <param name="mvcBuilder"></param>
            <param name="enabledGlobalDataValidationFilter">启用全局验证过滤器</param>
            <param name="suppressImplicitRequiredAttributeForNonNullableReferenceTypes">禁止C# 8.0 验证非可空引用类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Boolean)">
            <summary>
            添加全局数据验证
            </summary>
            <param name="services"></param>
            <param name="enabledGlobalDataValidationFilter">启用全局验证过滤器</param>
            <param name="suppressImplicitRequiredAttributeForNonNullableReferenceTypes">禁止C# 8.0 验证非可空引用类型</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions">
            <summary>
            依赖注入拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加依赖注入接口
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddScopedDispatchProxyForInterface``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加接口代理
            </summary>
            <typeparam name="TDispatchProxy">代理类</typeparam>
            <typeparam name="TIDispatchProxy">被代理接口依赖</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddAutoScanInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加自动扫描注入
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.DependencyInjection.RegisterType,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="registerType">类型作用域</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterType(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.DependencyInjection.RegisterType,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="registerType">注册类型</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterTransientType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册瞬时接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterScopeType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册作用域接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterSingletonType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册单例接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddTransientDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            创建暂时瞬时代理
            </summary>
            <param name="services">服务集合</param>
            <param name="type">拦截的类型</param>
            <param name="proxyType">代理类型</param>
            <param name="inter">代理接口</param>
            <param name="hasTarget">是否有实现类</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddScopedDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            创建作用域代理
            </summary>
            <param name="services">服务集合</param>
            <param name="type">被代理类型</param>
            <param name="proxyType">代理类型</param>
            <param name="inter">拦截接口</param>
            <param name="hasTarget">是否有实例</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddSingletonDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            创建作用域代理
            </summary>
            <param name="services">服务集合</param>
            <param name="type">被代理类型</param>
            <param name="proxyType">代理类型</param>
            <param name="inter">拦截接口</param>
            <param name="hasTarget">是否有实例</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册代理类型
            </summary>
            <param name="services"></param>
            <param name="lifetime"></param>
            <param name="proxyType"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterNamed(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterExternalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册外部服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 注册 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.LoadStringType(System.String)">
            <summary>
            加载字符串类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterDispatchProxies">
            <summary>
            已经注册的代理类
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.DispatchCreateMethod">
            <summary>
            创建代理方法
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GlobalServiceProxyType">
            <summary>
            全局服务代理类型
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions">
             <summary>
            动态接口控制器拓展类
             </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="services"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddBaseServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加基础服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.ConfigureMvcBuilder(Microsoft.AspNetCore.Mvc.MvcOptions)">
            <summary>
            配置 Mvc 构建器
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions">
            <summary>
            轻量级事件总线服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddSimpleEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加轻量级事件总线服务拓展
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="services"></param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"></param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddBaseConfigure(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            新增基础配置
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions">
            <summary>
            多语言服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddAppLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            配置多语言服务
            </summary>
            <param name="mvcBuilde"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions">
            <summary>
            对象映射拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions.AddObjectMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加对象映射
            </summary>
            <param name="services">服务集合</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RemoteRequestServiceCollectionExtensions">
            <summary>
            远程请求服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RemoteRequestServiceCollectionExtensions.AddRemoteRequest(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            注册远程请求
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions">
            <summary>
            规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="services">服务集合</param>
            <param name="swaggerGenConfigure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="mvcBuilder">Mvc 构建器</param>
            <param name="swaggerGenConfigure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions">
            <summary>
            规范化结果服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions">
            <summary>
            Mvc 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddJsonSerializerPascalPropertyNaming(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            配置 Json 序列化属性名大写
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddDateTimeJsonConverter(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String)">
            <summary>
            添加时间格式化
            </summary>
            <param name="mvcBuilder"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="extraConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"></param>
            <param name="extraConfigure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions">
            <summary>
            视图引擎服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions.AddViewEngine(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加视图引擎
            </summary>
            <param name="services"></param>
            <param name="templateSaveDir"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            Web 主机注入
            </summary>
            <param name="hostBuilder">Web主机构建器</param>
            <param name="assemblyName">外部程序集名称</param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerExtensions">
            <summary>
            日志拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDynamic(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            动态日志级别
            </summary>
            <param name="logger"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDynamic(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            动态日志级别
            </summary>
            <param name="logger"></param>
            <param name="eventId"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDynamic(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            动态日志级别
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDynamic(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            动态日志级别
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.GetDynamicLogLevelConfigure">
            <summary>
            获取配置动态日志级别
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.EFCoreExtensions">
            <summary>
            EntityFramework Core 拓展
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EFCoreExtensions.Include``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            [EF Core] 根据条件成立再构建 Include 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <typeparam name="TProperty">泛型属性类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">新的集合对象表达式</param>
            <returns></returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.TablePrefixAttribute">
            <summary>
            配置表名称前缀
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.TablePrefixAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TablePrefixAttribute.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DataValidationAttribute">
            <summary>
            数据类型验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationPattern">验证逻辑</param>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.AllowNullOrEmptyStrings">
            <summary>
            允许NULL或空字符串（也就是空字符串和Null都是通过的）
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AllOfThem">
            <summary>
            全部都要验证通过
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AtLeastOne">
            <summary>
            至少一个验证通过
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PagedList`1">
            <summary>
            分页泛型集合
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.HasPrevPages">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PagedList`1.HasNextPages">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PagedList">
            <summary>
            分页集合
            </summary>
        </member>
        <member name="T:System.Linq.IEnumerableExtensions">
            <summary>
            IEnumerable 拓展
            </summary>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            [EF Core] 根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            [EF Core] 根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            [EF Core] 与操作合并多个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}[])">
            <summary>
            [EF Core] 与操作合并多个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}}[])">
            <summary>
            [EF Core] 根据条件成立再构建 WhereOr 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}}[])">
            <summary>
            [EF Core] 根据条件成立再构建 WhereOr 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
    </members>
</doc>
